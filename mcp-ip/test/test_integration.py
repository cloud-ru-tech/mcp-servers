"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MCP IP —Å–µ—Ä–≤–µ—Ä–∞
–¢—Ä–µ–±—É—é—Ç APP_CODE –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API
"""
import pytest
import os
import sys
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

from server import (
    get_user_real_ip,
    make_ip_query_request,
    ip_address_query,
    ip_address_query_precision_version,
    APP_CODE
)

# –ú–∞—Ä–∫–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
pytestmark = pytest.mark.integration


@pytest.mark.skipif(not APP_CODE, reason="APP_CODE not set")
class TestRealIPAPI:
    """–¢–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API (—Ç—Ä–µ–±—É—é—Ç APP_CODE)"""
    
    @pytest.mark.asyncio
    async def test_get_user_real_ip_integration(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        result = await get_user_real_ip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ IP-–∞–¥—Ä–µ—Å
        assert result != ""
        assert "." in result or ":" in result  # IPv4 –∏–ª–∏ IPv6
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π IP: {result}")
    
    @pytest.mark.asyncio
    async def test_ip_address_query_integration_public_ip(self):
        """–¢–µ—Å—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º IP –∞–¥—Ä–µ—Å–æ–º"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π DNS Google
        result = await ip_address_query("8.8.8.8")
        
        assert "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ: 8.8.8.8" in result
        assert "–°–®–ê" in result or "USA" in result or "United States" in result
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è 8.8.8.8:\n{result}")
    
    @pytest.mark.asyncio
    async def test_ip_address_query_precision_integration(self):
        """–¢–µ—Å—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –ø—É–±–ª–∏—á–Ω—ã–º IP"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Cloudflare DNS
        result = await ip_address_query_precision_version("1.1.1.1")
        
        assert "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ: 1.1.1.1" in result
        assert "–ê–≤—Å—Ç—Ä–∞–ª–∏—è" in result or "Australia" in result
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç precision –¥–ª—è 1.1.1.1:\n{result}")
    
    @pytest.mark.asyncio
    async def test_ip_address_query_empty_ip_integration(self):
        """–¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º IP (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"""
        result = await ip_address_query("")
        
        assert "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ:" in result
        assert "–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: 200" in result
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ IP:\n{result}")
    
    @pytest.mark.asyncio
    async def test_both_versions_comparison(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±–µ–∏—Ö –≤–µ—Ä—Å–∏–π API"""
        test_ip = "8.8.4.4"
        
        # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        result_basic = await ip_address_query(test_ip)
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        result_precision = await ip_address_query_precision_version(test_ip)
        
        # –û–±–∞ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
        assert "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ:" in result_basic
        assert "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ:" in result_precision
        
        print(f"–ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è {test_ip}:\n{result_basic}")
        print(f"\n–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è {test_ip}:\n{result_precision}")
    
    @pytest.mark.asyncio
    async def test_invalid_ip_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ IP"""
        result = await ip_address_query("invalid.ip.address")
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞
        assert "‚ùå" in result or "–û—à–∏–±–∫–∞" in result
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ IP:\n{result}")


class TestMockIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –±–µ–∑ APP_CODE (—Å –º–æ–∫–∞–º–∏)"""
    
    @pytest.mark.asyncio
    async def test_server_tools_structure(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞"""
        from server import mcp
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools = mcp.list_tools()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        assert len(tools) >= 2
        
        tool_names = [tool.name for tool in tools]
        assert "ip_address_query" in tool_names
        assert "ip_address_query_precision_version" in tool_names
        
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {tool_names}")
    
    @pytest.mark.asyncio
    async def test_server_startup_mock(self):
        """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        from server import app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
        assert app is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        routes = [route.path for route in app.routes]
        assert "/sse" in routes
        
        print(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã: {routes}")


@pytest.mark.asyncio
async def test_concurrent_requests():
    """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    test_ips = ["8.8.8.8", "1.1.1.1", "208.67.222.222"]  # Google, Cloudflare, OpenDNS
    
    if not APP_CODE:
        pytest.skip("APP_CODE not set")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [ip_address_query(ip) for ip in test_ips]
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for i, result in enumerate(results):
        if isinstance(result, Exception):
            print(f"–û—à–∏–±–∫–∞ –¥–ª—è IP {test_ips[i]}: {result}")
        else:
            assert "üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP-–∞–¥—Ä–µ—Å–µ:" in result
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {test_ips[i]}: –û–ö")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    if APP_CODE:
        print("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º API...")
        pytest.main([__file__, "-v", "-s"])
    else:
        print("APP_CODE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫ mock —Ç–µ—Å—Ç–æ–≤...")
        pytest.main([__file__, "-v", "-s", "-k", "mock"]) 