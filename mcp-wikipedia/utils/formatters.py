from typing import Dict, List


def format_search_results(results: List[Dict], query: str, language: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
    
    Args:
        results: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        language: –Ø–∑—ã–∫ –ø–æ–∏—Å–∫–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if not results:
        return (
            f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ "
            f"{language} Wikipedia"
        )
    
    formatted = (
        f"üìö –ù–∞–π–¥–µ–Ω–æ {len(results)} —Å—Ç–∞—Ç–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' "
        f"(—è–∑—ã–∫: {language}):\n\n"
    )
    
    for i, article in enumerate(results, 1):
        title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        snippet = article.get('snippet', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        url = article.get('url', '')
        size = article.get('size', 0)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É snippet
        if len(snippet) > 200:
            snippet = snippet[:200] + "..."
        
        formatted += f"{i}. **{title}**\n"
        formatted += f"   üìñ {snippet}\n"
        formatted += f"   üìè –†–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç\n"
        formatted += f"   üîó {url}\n\n"
    
    return formatted.strip()


def format_article_summary(article: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    
    Args:
        article: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    description = article.get('description', '')
    extract = article.get('extract', '')
    url = article.get('url', '')
    thumbnail = article.get('thumbnail', '')
    language = article.get('language', 'ru')
    
    formatted = f"üìñ **{title}**\n\n"
    
    if description:
        formatted += f"üìù *{description}*\n\n"
    
    if extract:
        formatted += f"{extract}\n\n"
    
    if thumbnail:
        formatted += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {thumbnail}\n\n"
    
    formatted += f"üåê –Ø–∑—ã–∫: {language}\n"
    formatted += f"üîó –°—Å—ã–ª–∫–∞: {url}"
    
    return formatted


def format_article_content(article: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    
    Args:
        article: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    title = article.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    content = article.get('content', '')
    url = article.get('url', '')
    thumbnail = article.get('thumbnail', '')
    language = article.get('language', 'ru')
    char_count = len(content)
    
    formatted = f"üìö **{title}** ({char_count:,} —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
    
    if content:
        formatted += f"{content}\n\n"
    else:
        formatted += "‚ùå –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
    
    if thumbnail:
        formatted += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {thumbnail}\n"
    
    formatted += f"üåê –Ø–∑—ã–∫: {language}\n"
    formatted += f"üîó –°—Å—ã–ª–∫–∞: {url}"
    
    return formatted


def format_article_sections(sections_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å—Ç–∞—Ç—å–∏
    
    Args:
        sections_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    title = sections_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    sections = sections_data.get('sections', [])
    language = sections_data.get('language', 'ru')
    
    if not sections:
        return f"üìö –°—Ç–∞—Ç—å—è '{title}' –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–∑–¥–µ–ª–æ–≤"
    
    formatted = f"üìö –†–∞–∑–¥–µ–ª—ã —Å—Ç–∞—Ç—å–∏ '{title}' (—è–∑—ã–∫: {language}):\n\n"
    
    for section in sections:
        level = section.get('level', 1)
        line = section.get('line', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        number = section.get('number', '')
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—Ç—É–ø –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        indent = "  " * (level - 1)
        formatted += f"{indent}{'#' * level} {number} {line}\n"
    
    return formatted.strip()


def format_article_links(links_data: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏–∑ —Å—Ç–∞—Ç—å–∏
    
    Args:
        links_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–æ–∫
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    """
    title = links_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    links = links_data.get('links', [])
    language = links_data.get('language', 'ru')
    
    if not links:
        return f"üìö –°—Ç–∞—Ç—å—è '{title}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—å–∏"
    
    formatted = f"üîó –°—Å—ã–ª–∫–∏ –∏–∑ —Å—Ç–∞—Ç—å–∏ '{title}' (—è–∑—ã–∫: {language}):\n\n"
    
    for i, link in enumerate(links[:20], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Å—Å—ã–ª–∫–∞–º–∏
        formatted += f"{i}. {link}\n"
    
    if len(links) > 20:
        formatted += f"\n... –∏ –µ—â–µ {len(links) - 20} —Å—Å—ã–ª–æ–∫"
    
    return formatted.strip() 