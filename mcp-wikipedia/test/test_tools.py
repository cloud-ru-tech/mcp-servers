#!/usr/bin/env python3
"""
MCP Wikipedia Server - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
============================================================
–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Wikipedia —Å–µ—Ä–≤–µ—Ä–∞
–î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from server import (
    search_wikipedia, 
    get_wikipedia_summary, 
    get_wikipedia_content,
    get_wikipedia_sections,
    get_wikipedia_links
)

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ MCP Wikipedia —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 60)
    
    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –≤ Wikipedia")
    
    # –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    print("\n" + "=" * 50)
    print("–ü–æ–∏—Å–∫ '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)")
    print("=" * 50)
    result1 = await search_wikipedia("–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", limit=3, language="ru")
    print(result1)
    
    # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
    print("\n" + "=" * 50)
    print("–ü–æ–∏—Å–∫ 'machine learning' (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫)")
    print("=" * 50)
    result2 = await search_wikipedia("machine learning", limit=3, language="en")
    print(result2)
    
    print("\nüìñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏")
    
    # –¢–µ—Å—Ç 3: –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    print("\n" + "=" * 50)
    print("–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ 'Python'")
    print("=" * 50)
    result3 = await get_wikipedia_summary("Python", language="ru")
    print(result3)
    
    print("\nüìÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏")
    
    # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (–∫–æ—Ä–æ—Ç–∫–∞—è —Å—Ç–∞—Ç—å—è)
    print("\n" + "=" * 50)
    print("–ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ '–ê–ª–≥–æ—Ä–∏—Ç–º'")
    print("=" * 50)
    result4 = await get_wikipedia_content("–ê–ª–≥–æ—Ä–∏—Ç–º", language="ru")
    print(result4)
    
    print("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–æ–≤ —Å—Ç–∞—Ç—å–∏")
    
    # –¢–µ—Å—Ç 5: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
    print("\n" + "=" * 50)
    print("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å—Ç–∞—Ç—å–∏ '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'")
    print("=" * 50)
    result5 = await get_wikipedia_sections("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", language="ru")
    print(result5)
    
    print("\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –∏–∑ —Å—Ç–∞—Ç—å–∏")
    
    # –¢–µ—Å—Ç 6: –°—Å—ã–ª–∫–∏ –∏–∑ —Å—Ç–∞—Ç—å–∏
    print("\n" + "=" * 50)
    print("–°—Å—ã–ª–∫–∏ –∏–∑ —Å—Ç–∞—Ç—å–∏ 'Python' (–ø–µ—Ä–≤—ã–µ 10)")
    print("=" * 50)
    result6 = await get_wikipedia_links("Python", language="ru")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Å—Å—ã–ª–æ–∫ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    lines = result6.split('\n')
    short_result = '\n'.join(lines[:25])  # –ü—Ä–∏–º–µ—Ä–Ω–æ 10 —Å—Å—ã–ª–æ–∫
    if len(lines) > 25:
        short_result += f"\n... –∏ –µ—â—ë {len(lines) - 25} —Å—Ç—Ä–æ–∫"
    print(short_result)
    
    print("\n‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    # –¢–µ—Å—Ç 7: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å—Ç–∞—Ç—å—è
    print("\n" + "=" * 50)
    print("–ü–æ–∏—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç–∞—Ç—å–∏")
    print("=" * 50)
    try:
        result7 = await get_wikipedia_summary("–ê–±—Å–æ–ª—é—Ç–Ω–æ_–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è_—Å—Ç–∞—Ç—å—è_12345", language="ru")
        print(result7)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
    
    # –¢–µ—Å—Ç 8: –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    print("\n" + "=" * 50)
    print("–ü–æ–∏—Å–∫ —Å –ø—É—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º")
    print("=" * 50)
    try:
        result8 = await search_wikipedia("", language="ru")
        print(result8)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
    
    print("\nüåê –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")
    
    # –¢–µ—Å—Ç 9: –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    languages = [
        ("ru", "–†–æ—Å—Å–∏—è", "üá∑üá∫"),
        ("en", "Russia", "üá∫üá∏"),
        ("de", "Russland", "üá©üá™"),
        ("fr", "Russie", "üá´üá∑"),
        ("es", "Rusia", "üá™üá∏")
    ]
    
    for lang, query, flag in languages:
        print("\n" + "=" * 50)
        print(f"–ü–æ–∏—Å–∫ '{query}' –Ω–∞ —è–∑—ã–∫–µ {flag} {lang}")
        print("=" * 50)
        result = await search_wikipedia(query, limit=2, language=lang)
        print(result)
    
    print("\n‚úÖ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 