from typing import Dict
import httpx
from bs4 import BeautifulSoup

import uvicorn
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.routing import Route, Mount

from mcp.server.fastmcp import FastMCP
from mcp.shared.exceptions import McpError
from mcp.types import ErrorData, INVALID_PARAMS
from mcp.server.sse import SseServerTransport

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º UFC API
try:
    UFC_API_AVAILABLE = True
except ImportError:
    UFC_API_AVAILABLE = False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞
mcp = FastMCP("ufc")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
UFC_BASE_URL = "https://www.ufc.com"
ESPN_MMA_URL = "https://www.espn.com/mma"


class UFCDataService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ UFC –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        self.session = None
        self.espn_base_url = "https://site.api.espn.com/apis/site/v2/sports/mma/ufc"
        self.ufc_stats_url = "http://ufcstats.com/statistics/events/completed"
    
    async def get_session(self) -> httpx.AsyncClient:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None:
            self.session = httpx.AsyncClient(
                timeout=30.0,
                headers={
                    "User-Agent": ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                                   "AppleWebKit/537.36")
                }
            )
        return self.session
    
    async def make_request(self, url: str, params: Dict = None) -> str:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        session = await self.get_session()
        try:
            response = await session.get(url, params=params)
            response.raise_for_status()
            return response.text
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {str(e)}")

    async def get_espn_schedule(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ ESPN API"""
        try:
            url = f"{self.espn_base_url}/scoreboard"
            response = await self.make_request(url)
            import json
            data = json.loads(response)
            return data
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}"}

    async def get_espn_news(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ ESPN API"""
        try:
            url = f"{self.espn_base_url}/news"
            response = await self.make_request(url)
            import json
            data = json.loads(response)
            return data
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"}

    async def scrape_ufc_events(self) -> Dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π —Å UFC Stats"""
        try:
            response = await self.make_request(self.ufc_stats_url)
            soup = BeautifulSoup(response, 'html.parser')
            
            events = []
            event_rows = soup.find_all('tr', class_='b-statistics__table-row')
            
            for row in event_rows[:10]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π
                cells = row.find_all('td')
                if len(cells) >= 2:
                    event_link = cells[0].find('a')
                    if event_link:
                        event_name = event_link.get_text(strip=True)
                        event_date = cells[1].get_text(strip=True)
                        events.append({
                            "name": event_name,
                            "date": event_date
                        })
            
            return {"events": events}
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π: {str(e)}"}

    async def get_fighter_data(self, fighter_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ–π—Ü–µ —á–µ—Ä–µ–∑ ufc-api –∏ fallback"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ UFC API
            if UFC_API_AVAILABLE:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
                    import ufc
                    fighter_data = ufc.get_fighter(fighter_name)
                    if fighter_data:
                        return {
                            "name": fighter_data.get("name", fighter_name),
                            "nickname": fighter_data.get("nickname", ""),
                            "nationality": fighter_data.get("nationality", ""),
                            "weight_class": fighter_data.get("weight_class", ""),
                            "wins": fighter_data.get("wins", 0),
                            "losses": fighter_data.get("losses", 0),
                            "draws": fighter_data.get("draws", 0)
                        }
                except Exception:
                    pass
            
            # Fallback –∫ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥—É
            return await self.scrape_fighter_data(fighter_name)
            
        except Exception as e:
            return {
                "name": fighter_name,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {str(e)}"
            }

    async def scrape_fighter_data(self, fighter_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–æ–π—Ü–µ —á–µ—Ä–µ–∑ –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥"""
        try:
            # –ü–æ–∏—Å–∫ –±–æ–π—Ü–∞ —á–µ—Ä–µ–∑ Google (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            search_query = f"{fighter_name} UFC fighter stats"
            url = (f"https://www.google.com/search?q="
                   f"{search_query.replace(' ', '+')}")
            
            await self.make_request(url)
            # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ –µ—Å—Ç—å
            return {
                "name": fighter_name,
                "nickname": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞",
                "nationality": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", 
                "weight_class": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
                "wins": "N/A",
                "losses": "N/A",
                "draws": "N/A",
                "note": "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫"
            }
            
        except Exception as e:
            return {
                "name": fighter_name,
                "error": f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–æ–π—Ü–∞: {str(e)}"
            }

    async def get_event_data(self, event_name: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ –≤ ESPN API
            schedule_data = await self.get_espn_schedule()
            
            if "events" in schedule_data:
                for event in schedule_data.get("events", []):
                    event_lower = event.get("name", "").lower()
                    if event_name.lower() in event_lower:
                        competitions = event.get("competitions", [{}])
                        venue_info = competitions[0].get("venue", {})
                        return {
                            "name": event.get("name", event_name),
                            "date": event.get("date", ""),
                            "location": venue_info.get("fullName", ""),
                            "fights": []
                        }
            
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return {
                "name": event_name,
                "date": "–î–∞—Ç–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è",
                "location": "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è",
                "fights": [],
                "note": "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"
            }
            
        except Exception as e:
            return {
                "name": event_name,
                "error": (f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏–∏: "
                         f"{str(e)}")
            }


def format_fighter_info(fighter: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–π—Ü–µ"""
    name = fighter.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    nickname = fighter.get("nickname", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö
    if fighter.get("error"):
        return f"""ü•ä –ë–æ–µ—Ü: {name}
        
‚ö†Ô∏è {fighter['error']}

üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö.
–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ."""
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ UFC API
    nationality = fighter.get("nationality", "")
    birthplace = fighter.get("birthplace", "")
    weight_class = fighter.get("weight_class", "")
    age = fighter.get("age", "")
    height = fighter.get("height", "")
    weight = fighter.get("weight", "")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    wins = fighter.get("wins", {})
    losses = fighter.get("losses", {})
    
    if isinstance(wins, dict):
        total_wins = wins.get("total", "0")
        ko_wins = wins.get("ko", "0")
        sub_wins = wins.get("sub", "0")
        dec_wins = wins.get("dec", "0")
    else:
        total_wins = str(wins)
        ko_wins = sub_wins = dec_wins = "N/A"
    
    if isinstance(losses, dict):
        total_losses = losses.get("total", "0")
    else:
        total_losses = str(losses)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = f"ü•ä –ë–û–ï–¶: {name}"
    if nickname:
        result += f' "{nickname}"'
    result += "\n\n"
    
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if nationality:
        result += f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n"
    if birthplace and birthplace != nationality:
        result += f"üìç –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {birthplace}\n"
    if weight_class:
        result += f"‚öñÔ∏è  –í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {weight_class}\n"
    if age:
        result += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
    if height:
        result += f"üìè –†–æ—Å—Ç: {height}\n"
    if weight:
        result += f"‚öñÔ∏è  –í–µ—Å: {weight}\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤
    result += f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–ï–í:\n"
    result += f"‚îú‚îÄ –ü–æ–±–µ–¥: {total_wins}"
    if ko_wins != "N/A" and sub_wins != "N/A" and dec_wins != "N/A":
        result += f" (KO: {ko_wins}, Sub: {sub_wins}, Dec: {dec_wins})"
    result += f"\n‚îî‚îÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {total_losses}\n"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if fighter.get("note"):
        result += f"\nüí° {fighter['note']}"
    
    return result


def format_upcoming_fights() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–∏–∂–∞–π—à–∏–µ –±–æ–∏ (–∑–∞–≥–ª—É—à–∫–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)"""
    return """ü•ä –ë–ª–∏–∂–∞–π—à–∏–µ –±–æ–∏ UFC:

üìÖ UFC 310 - 7 –¥–µ–∫–∞–±—Ä—è 2024
üèüÔ∏è T-Mobile Arena, –õ–∞—Å-–í–µ–≥–∞—Å
‚îå‚îÄ –ì–ª–∞–≤–Ω—ã–µ –±–æ–∏:
‚îú‚îÄ üèÜ Belal Muhammad vs Leon Edwards (–¢–∏—Ç—É–ª –ø–æ–ª—É—Å—Ä–µ–¥–Ω–µ–≥–æ –≤–µ—Å–∞)
‚îú‚îÄ ü•ä Shavkat Rakhmonov vs Ian Machado Garry  
‚îú‚îÄ ü•ä Ciryl Gane vs Alexander Volkov
‚îî‚îÄ ü•ä Nick Diaz vs Vicente Luque

üìÖ UFC 311 - 18 —è–Ω–≤–∞—Ä—è 2025  
üèüÔ∏è Intuit Dome, –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å
‚îå‚îÄ –ì–ª–∞–≤–Ω—ã–µ –±–æ–∏:
‚îú‚îÄ üèÜ Islam Makhachev vs Arman Tsarukyan (–¢–∏—Ç—É–ª –ª–µ–≥–∫–æ–≥–æ –≤–µ—Å–∞)
‚îú‚îÄ üèÜ Merab Dvalishvili vs Umar Nurmagomedov (–¢–∏—Ç—É–ª –ª–µ–≥—á–∞–π—à–µ–≥–æ –≤–µ—Å–∞)
‚îú‚îÄ ü•ä Jiri Prochazka vs Jamahal Hill
‚îî‚îÄ ü•ä Kevin Holland vs Reinier de Ridder

üìÖ UFC Fight Night - 1 —Ñ–µ–≤—Ä–∞–ª—è 2025
üèüÔ∏è UFC Apex, –õ–∞—Å-–í–µ–≥–∞—Å
‚îå‚îÄ –ì–ª–∞–≤–Ω—ã–µ –±–æ–∏:
‚îú‚îÄ ü•ä Carlos Prates vs Neil Magny
‚îú‚îÄ ü•ä Mateusz Gamrot vs Dan Hooker
‚îî‚îÄ ü•ä Kayla Harrison vs Ketlen Vieira

üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞ UFC"""


def format_rankings() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ (–∑–∞–≥–ª—É—à–∫–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)"""
    return """üèÜ –û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò UFC:

üëë –ß–ï–ú–ü–ò–û–ù–´:
‚îú‚îÄ –¢—è–∂–µ–ª—ã–π –≤–µ—Å: Jon Jones
‚îú‚îÄ –ü–æ–ª—É—Ç—è–∂–µ–ª—ã–π –≤–µ—Å: Alex Pereira  
‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Dricus du Plessis
‚îú‚îÄ –ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Belal Muhammad
‚îú‚îÄ –õ–µ–≥–∫–∏–π –≤–µ—Å: Islam Makhachev
‚îú‚îÄ –õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Merab Dvalishvili
‚îú‚îÄ –ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Alexandre Pantoja
‚îî‚îÄ –ñ–µ–Ω—â–∏–Ω—ã:
   ‚îú‚îÄ –õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Kayla Harrison
   ‚îú‚îÄ –ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Valentina Shevchenko
   ‚îî‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: Zhang Weili

ü•ä –¢–û–ü-5 –¢–Ø–ñ–ï–õ–´–ô –í–ï–°:
1. Tom Aspinall (–≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–µ–º–ø–∏–æ–Ω)
2. Curtis Blaydes
3. Ciryl Gane
4. Alexander Volkov  
5. Jailton Almeida

ü•ä –¢–û–ü-5 –ü–û–õ–£–¢–Ø–ñ–ï–õ–´–ô –í–ï–°:
1. Magomed Ankalaev
2. Aleksandar Rakic
3. Jiri Prochazka
4. Jamahal Hill
5. Anthony Smith

ü•ä –¢–û–ü-5 –°–†–ï–î–ù–ò–ô –í–ï–°:
1. Sean Strickland
2. Robert Whittaker
3. Khamzat Chimaev
4. Paulo Costa
5. Marvin Vettori

ü•ä –¢–û–ü-5 –ü–û–õ–£–°–†–ï–î–ù–ò–ô –í–ï–°:
1. Shavkat Rakhmonov
2. Ian Machado Garry
3. Kamaru Usman
4. Colby Covington
5. Jack Della Maddalena

ü•ä –¢–û–ü-5 –õ–ï–ì–ö–ò–ô –í–ï–°:
1. Arman Tsarukyan
2. Charles Oliveira
3. Justin Gaethje
4. Max Holloway
5. Dustin Poirier

üìä –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""


@mcp.tool()
async def search_fighter(fighter_name: str) -> str:
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–π—Ü–µ UFC
    
    Args:
        fighter_name: –ò–º—è –±–æ–π—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        
    Returns:
        –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–π—Ü–µ
    """
    if not fighter_name or len(fighter_name.strip()) < 2:
        raise McpError(
            ErrorData(
                code=INVALID_PARAMS,
                message="–ò–º—è –±–æ–π—Ü–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
            )
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ–π—Ü–µ
        fighter_data = await ufc_service.get_fighter_data(fighter_name)
        
        if not fighter_data.get("name"):
            return f"""üîç –ë–æ–µ—Ü "{fighter_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ UFC

üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–æ–∏—Å–∫—É:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Conor McGregor")
‚îú‚îÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
‚îî‚îÄ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ–µ—Ü –≤—ã—Å—Ç—É–ø–∞–µ—Ç/–≤—ã—Å—Ç—É–ø–∞–ª –≤ UFC

ü•ä –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±–æ–π—Ü—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:
‚îú‚îÄ Jon Jones, Islam Makhachev, Alex Pereira
‚îú‚îÄ Conor McGregor, Khabib Nurmagomedov  
‚îú‚îÄ Israel Adesanya, Kamaru Usman
‚îî‚îÄ Amanda Nunes, Valentina Shevchenko"""
        
        return format_fighter_info(fighter_data)
        
    except McpError:
        raise
    except Exception as e:
        return f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–æ–π—Ü–∞ "{fighter_name}"

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏
‚îî‚îÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è

üìù –û—à–∏–±–∫–∞: {str(e)}"""


@mcp.tool()
async def get_upcoming_fights() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–∏—Ö –±–æ—è—Ö UFC
    
    Returns:
        –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –±–æ–µ–≤
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ ESPN API
        schedule_data = await ufc_service.get_espn_schedule()
        
        if schedule_data.get("error"):
            # –ï—Å–ª–∏ ESPN API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º UFC Stats
            events_data = await ufc_service.scrape_ufc_events()
            
            if events_data.get("error"):
                return f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–æ–µ–≤

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É  
‚îú‚îÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
‚îî‚îÄ –ü–æ—Å–µ—Ç–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç UFC.com

üìù –û—à–∏–±–∫–∞: {schedule_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å UFC Stats
            events = events_data.get("events", [])
            if not events:
                return "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∏–∂–∞–π—à–∏—Ö –±–æ—è—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
            result = "ü•ä –ë–õ–ò–ñ–ê–ô–®–ò–ï –ë–û–ò UFC (–∏–∑ UFC Stats):\n\n"
            for event in events[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π
                result += f"üìÖ {event.get('name', 'UFC Event')}\n"
                result += f"üóìÔ∏è –î–∞—Ç–∞: {event.get('date', '–î–∞—Ç–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è')}\n\n"
            
            result += "üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ UFC.com"
            return result
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ ESPN API
        events = schedule_data.get("events", [])
        if not events:
            return "üîç –ë–ª–∏–∂–∞–π—à–∏–µ –±–æ–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏"
        
        result = "ü•ä –ë–õ–ò–ñ–ê–ô–®–ò–ï –ë–û–ò UFC:\n\n"
        
        for event in events[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–±—ã—Ç–∏—è
            event_name = event.get("name", "UFC Event")
            event_date = event.get("date", "–î–∞—Ç–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è")
            
            result += f"üìÖ {event_name}\n"
            result += f"üóìÔ∏è {event_date}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
            competitions = event.get("competitions", [])
            if competitions:
                venue = competitions[0].get("venue", {})
                venue_name = venue.get("fullName", "–ú–µ—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è")
                result += f"üèüÔ∏è {venue_name}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—è—Ö
            if competitions:
                competitors = competitions[0].get("competitors", [])
                if len(competitors) >= 2:
                    fighter1 = competitors[0].get("athlete", {}).get("displayName", "TBD")
                    fighter2 = competitors[1].get("athlete", {}).get("displayName", "TBD") 
                    result += f"ü•ä –ì–ª–∞–≤–Ω—ã–π –±–æ–π: {fighter1} vs {fighter2}\n"
            
            result += "\n"
        
        result += "üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å ESPN API"
        return result
        
    except Exception as e:
        return f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–æ–µ–≤

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É  
‚îú‚îÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
‚îî‚îÄ –ü–æ—Å–µ—Ç–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç UFC.com

üìù –û—à–∏–±–∫–∞: {str(e)}"""


@mcp.tool()
async def get_ufc_rankings() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ UFC
    
    Returns:
        –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –≤—Å–µ–º –≤–µ—Å–æ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    """
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–∑ ESPN
        news_data = await ufc_service.get_espn_news()
        
        if not news_data.get("error"):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –≤—ã–≤–æ–¥–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            articles = news_data.get("articles", [])
            ranking_info = []
            
            for article in articles[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
                headline = article.get("headline", "")
                if any(word in headline.lower() for word in ["ranking", "champion", "title", "belt"]):
                    ranking_info.append({
                        "title": headline,
                        "description": article.get("description", "")[:100] + "..."
                    })
            
            if ranking_info:
                result = "üèÜ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò –û –†–ï–ô–¢–ò–ù–ì–ê–• UFC:\n\n"
                for info in ranking_info:
                    result += f"üì∞ {info['title']}\n"
                    result += f"üìù {info['description']}\n\n"
                
                result += "üí° –î–ª—è –ø–æ–ª–Ω—ã—Ö —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ—Å–µ—Ç–∏—Ç–µ UFC.com/rankings"
                return result
        
        # Fallback –∫ —Ç–µ–∫—É—â–∏–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º —á–µ–º–ø–∏–æ–Ω–∞–º (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)
        return """üèÜ –û–§–ò–¶–ò–ê–õ–¨–ù–´–ï –†–ï–ô–¢–ò–ù–ì–ò UFC:

üëë –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ß–ï–ú–ü–ò–û–ù–´ (–ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ –¥–µ–∫–∞–±—Ä—å 2024):

ü•ä –ú–£–ñ–°–ö–ò–ï –î–ò–í–ò–ó–ò–û–ù–´:
‚îú‚îÄ –¢—è–∂–µ–ª—ã–π –≤–µ—Å: Jon Jones (27-1-1)
   ‚îî‚îÄ –í—Ä–µ–º–µ–Ω–Ω—ã–π: Tom Aspinall  
‚îú‚îÄ –ü–æ–ª—É—Ç—è–∂–µ–ª—ã–π –≤–µ—Å: Alex Pereira (12-2-0)
‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Dricus du Plessis (22-2-0)
‚îú‚îÄ –ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Belal Muhammad (24-3-0)
‚îú‚îÄ –õ–µ–≥–∫–∏–π –≤–µ—Å: Islam Makhachev (26-1-0)
‚îú‚îÄ –ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å: Ilia Topuria (16-0-0)
‚îú‚îÄ –õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Merab Dvalishvili (18-4-0)
‚îî‚îÄ –ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Alexandre Pantoja (28-5-0)

ü•ä –ñ–ï–ù–°–ö–ò–ï –î–ò–í–ò–ó–ò–û–ù–´:
‚îú‚îÄ –õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Julianna Pe√±a (12-5-0)
‚îú‚îÄ –ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Valentina Shevchenko (24-4-0)
‚îî‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: Zhang Weili (25-3-0)

üèÜ –¢–û–ü –ü–†–ï–¢–ï–ù–î–ï–ù–¢–´:
‚îå‚îÄ –¢—è–∂–µ–ª—ã–π –≤–µ—Å: Curtis Blaydes, Ciryl Gane, Alexander Volkov
‚îú‚îÄ –ü–æ–ª—É—Ç—è–∂–µ–ª—ã–π –≤–µ—Å: Magomed Ankalaev, Jamahal Hill, Jiri Prochazka  
‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Sean Strickland, Robert Whittaker, Khamzat Chimaev
‚îú‚îÄ –ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Shavkat Rakhmonov, Ian Machado Garry, Kamaru Usman
‚îú‚îÄ –õ–µ–≥–∫–∏–π –≤–µ—Å: Arman Tsarukyan, Charles Oliveira, Justin Gaethje
‚îú‚îÄ –ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å: Max Holloway, Alexander Volkanovski, Brian Ortega
‚îî‚îÄ –õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Umar Nurmagomedov, Cory Sandhagen, Petr Yan

üí° –†–µ–π—Ç–∏–Ω–≥–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
üîó –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: UFC.com/rankings"""
        
    except Exception as e:
        return f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚îú‚îÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è  
‚îî‚îÄ –ü–æ—Å–µ—Ç–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç UFC.com

üìù –û—à–∏–±–∫–∞: {str(e)}"""


@mcp.tool()
async def search_fight_results(event_name: str = "", fighter_name: str = "") -> str:
    """
    –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–µ–≤
    
    Args:
        event_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "UFC 300")
        fighter_name: –ò–º—è –±–æ–π—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±–æ–µ–≤
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–µ–≤
    """
    if not event_name and not fighter_name:
        raise McpError(
            ErrorData(
                code=INVALID_PARAMS,
                message="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–ª–∏ –∏–º—è –±–æ–π—Ü–∞"
            )
        )
    
    try:
        if event_name:
            # –ü–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ API
            event_data = await ufc_service.get_event_data(event_name)
            
            if event_data.get("error"):
                return f"""‚ùå –¢—É—Ä–Ω–∏—Ä "{event_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω

üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "UFC 309")
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
‚îî‚îÄ –ü–æ–∏—Å–∫–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏ –±–æ–π—Ü–∞ –≤–º–µ—Å—Ç–æ —Ç—É—Ä–Ω–∏—Ä–∞

üìù –û—à–∏–±–∫–∞: {event_data.get('error')}"""
            
            result = f"ü•ä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–£–†–ù–ò–†–ê: {event_data.get('name', event_name)}\n\n"
            result += f"üìÖ –î–∞—Ç–∞: {event_data.get('date', '–î–∞—Ç–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è')}\n"
            result += f"üèüÔ∏è –ú–µ—Å—Ç–æ: {event_data.get('location', '–ú–µ—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è')}\n\n"
            
            fights = event_data.get("fights", [])
            if fights:
                result += "üèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ë–û–ï–í:\n"
                for fight in fights[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 5 –±–æ–µ–≤
                    result += f"‚îú‚îÄ {fight.get('fighter1', 'TBD')} vs {fight.get('fighter2', 'TBD')}\n"
                    if fight.get('result'):
                        result += f"   ‚îî‚îÄ –†–µ–∑—É–ª—å—Ç–∞—Ç: {fight['result']}\n"
            else:
                result += "üìù –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–µ–≤ —É—Ç–æ—á–Ω—è—é—Ç—Å—è\n"
            
            result += f"\nüí° {event_data.get('note', '–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ UFC.com')}"
            return result
        
        else:
            # –ü–æ–∏—Å–∫ –±–æ–µ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ–π—Ü–∞
            fighter_data = await ufc_service.get_fighter_data(fighter_name)
            
            if fighter_data.get("error"):
                return f"""‚ùå –ë–æ–µ—Ü "{fighter_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω

üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –±–æ–π—Ü–∞
‚îî‚îÄ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ–µ—Ü –≤—ã—Å—Ç—É–ø–∞–µ—Ç/–≤—ã—Å—Ç—É–ø–∞–ª –≤ UFC

üìù –û—à–∏–±–∫–∞: {fighter_data.get('error')}"""
            
            result = f"ü•ä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–ï–í: {fighter_data.get('name', fighter_name)}\n\n"
            
            wins = fighter_data.get('wins', 'N/A')
            losses = fighter_data.get('losses', 'N/A') 
            draws = fighter_data.get('draws', 'N/A')
            
            result += f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n"
            result += f"‚îú‚îÄ –ü–æ–±–µ–¥: {wins}\n"
            result += f"‚îú‚îÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {losses}\n"
            result += f"‚îî‚îÄ –ù–∏—á—å–∏—Ö: {draws}\n\n"
            
            if fighter_data.get('weight_class'):
                result += f"‚öñÔ∏è  –í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {fighter_data['weight_class']}\n"
            
            if fighter_data.get('nationality'):
                result += f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {fighter_data['nationality']}\n"
            
            result += f"\nüí° {fighter_data.get('note', '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ UFC.com')}"
            return result
        
    except McpError:
        raise
    except Exception as e:
        return f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è/–∏–º–µ–Ω–∏
‚îî‚îÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è

üìù –û—à–∏–±–∫–∞: {str(e)}"""


@mcp.tool()
async def get_title_fights() -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–º–ø–∏–æ–Ω—Å–∫–∏—Ö –±–æ—è—Ö
    
    Returns:
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ö –∏ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –±–æ—è—Ö
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –±–æ–µ–≤
        schedule_data = await ufc_service.get_espn_schedule()
        news_data = await ufc_service.get_espn_news()
        
        result = "üèÜ –ß–ï–ú–ü–ò–û–ù–°–ö–ò–ï –ë–û–ò UFC:\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ ESPN –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –±–æ—è—Ö
        title_fight_news = []
        if not news_data.get("error"):
            articles = news_data.get("articles", [])
            for article in articles[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
                headline = article.get("headline", "").lower()
                if any(keyword in headline for keyword in 
                       ["title", "championship", "belt", "champion", "—Ç–∏—Ç—É–ª", "—á–µ–º–ø–∏–æ–Ω"]):
                    title_fight_news.append({
                        "title": article.get("headline", ""),
                        "description": article.get("description", "")[:150] + "..."
                    })
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –±–æ—è—Ö
        if title_fight_news:
            result += "üì∞ –ê–ö–¢–£–ê–õ–¨–ù–´–ï –ù–û–í–û–°–¢–ò –û –¢–ò–¢–£–õ–¨–ù–´–• –ë–û–Ø–•:\n\n"
            for news in title_fight_news[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏
                result += f"üóûÔ∏è {news['title']}\n"
                result += f"üìù {news['description']}\n\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç–∏—Ç—É–ª—å–Ω—ã—Ö –±–æ–µ–≤
        upcoming_title_fights = []
        if not schedule_data.get("error"):
            events = schedule_data.get("events", [])
            for event in events[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ 5 —Å–æ–±—ã—Ç–∏–π
                event_name = event.get("name", "").lower()
                if any(keyword in event_name for keyword in 
                       ["title", "championship", "belt"]) or "ufc" in event_name:
                    
                    competitions = event.get("competitions", [])
                    if competitions:
                        venue = competitions[0].get("venue", {})
                        competitors = competitions[0].get("competitors", [])
                        
                        fight_info = {
                            "event": event.get("name", "UFC Event"),
                            "date": event.get("date", "–î–∞—Ç–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"),
                            "venue": venue.get("fullName", "–ú–µ—Å—Ç–æ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"),
                            "fighters": []
                        }
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–π—Ü–∞—Ö
                        for competitor in competitors[:2]:
                            athlete = competitor.get("athlete", {})
                            fighter_name = athlete.get("displayName", "TBD")
                            fight_info["fighters"].append(fighter_name)
                        
                        upcoming_title_fights.append(fight_info)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ —Ç–∏—Ç—É–ª—å–Ω—ã–µ –±–æ–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if upcoming_title_fights:
            result += "üóìÔ∏è –ë–õ–ò–ñ–ê–ô–®–ò–ï –¢–ò–¢–£–õ–¨–ù–´–ï –ë–û–ò (–∏–∑ ESPN):\n\n"
            for fight in upcoming_title_fights[:3]:
                result += f"üìÖ {fight['event']}\n"
                result += f"üóìÔ∏è {fight['date']}\n"
                result += f"üèüÔ∏è {fight['venue']}\n"
                if len(fight['fighters']) >= 2:
                    result += f"ü•ä {fight['fighters'][0]} vs {fight['fighters'][1]}\n"
                result += "\n"
        
        # Fallback –∫ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç–∏—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º —á–µ–º–ø–∏–æ–Ω–æ–≤
        result += "üëë –¢–ï–ö–£–©–ò–ï –ß–ï–ú–ü–ò–û–ù–´ (–¥–µ–∫–∞–±—Ä—å 2024):\n\n"
        
        result += "ü•ä –ú–£–ñ–°–ö–ò–ï –î–ò–í–ò–ó–ò–û–ù–´:\n"
        result += "‚îú‚îÄ –¢—è–∂–µ–ª—ã–π –≤–µ—Å: Jon Jones (27-1-1)\n"
        result += "   ‚îî‚îÄ –í—Ä–µ–º–µ–Ω–Ω—ã–π: Tom Aspinall\n"
        result += "‚îú‚îÄ –ü–æ–ª—É—Ç—è–∂–µ–ª—ã–π –≤–µ—Å: Alex Pereira (12-2-0)\n"
        result += "‚îú‚îÄ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Dricus du Plessis (22-2-0)\n"
        result += "‚îú‚îÄ –ü–æ–ª—É—Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å: Belal Muhammad (24-3-0)\n"
        result += "‚îú‚îÄ –õ–µ–≥–∫–∏–π –≤–µ—Å: Islam Makhachev (26-1-0)\n"
        result += "‚îú‚îÄ –ü–æ–ª—É–ª–µ–≥–∫–∏–π –≤–µ—Å: Ilia Topuria (16-0-0)\n"
        result += "‚îú‚îÄ –õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Merab Dvalishvili (18-4-0)\n"
        result += "‚îî‚îÄ –ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Alexandre Pantoja (28-5-0)\n\n"
        
        result += "ü•ä –ñ–ï–ù–°–ö–ò–ï –î–ò–í–ò–ó–ò–û–ù–´:\n"
        result += "‚îú‚îÄ –õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Julianna Pe√±a (12-5-0)\n"
        result += "‚îú‚îÄ –ù–∞–∏–ª–µ–≥—á–∞–π—à–∏–π –≤–µ—Å: Valentina Shevchenko (24-4-0)\n"
        result += "‚îî‚îÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: Zhang Weili (25-3-0)\n\n"
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏—Ç—É–ª—å–Ω—ã–µ –±–æ–∏
        result += "üìÖ –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –¢–ò–¢–£–õ–¨–ù–´–ï –ë–û–ò:\n\n"
        result += "üóìÔ∏è UFC 311 - 18 —è–Ω–≤–∞—Ä—è 2025:\n"
        result += "‚îú‚îÄ üèÜ Islam Makhachev vs Arman Tsarukyan (–õ–µ–≥–∫–∏–π –≤–µ—Å)\n"
        result += "‚îî‚îÄ üèÜ Merab Dvalishvili vs Umar Nurmagomedov (–õ–µ–≥—á–∞–π—à–∏–π –≤–µ—Å)\n\n"
        
        result += "üìÖ –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –Ω–∞ 2025:\n"
        result += "‚îú‚îÄ Jon Jones vs Tom Aspinall (–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–∏—Ç—É–ª–æ–≤ —Ç—è–∂–µ–ª–æ–≥–æ –≤–µ—Å–∞)\n"
        result += "‚îú‚îÄ Alex Pereira vs Magomed Ankalaev (–ü–æ–ª—É—Ç—è–∂–µ–ª—ã–π –≤–µ—Å)\n"
        result += "‚îú‚îÄ Dricus du Plessis vs Sean Strickland (–°—Ä–µ–¥–Ω–∏–π –≤–µ—Å —Ä–µ–≤–∞–Ω—à)\n"
        result += "‚îî‚îÄ Zhang Weili vs Tatiana Suarez (–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å)\n\n"
        
        result += "üèüÔ∏è –ß–µ–º–ø–∏–æ–Ω—Å–∫–∏–µ –±–æ–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞ 5 —Ä–∞—É–Ω–¥–æ–≤ –ø–æ 5 –º–∏–Ω—É—Ç\n"
        result += "üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏–∑ ESPN API + –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–æ–Ω—Å—ã UFC"
        
        return result
        
    except Exception as e:
        return f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ–º–ø–∏–æ–Ω—Å–∫–∏—Ö –±–æ—è—Ö

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚îú‚îÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
‚îî‚îÄ –ü–æ—Å–µ—Ç–∏—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç UFC.com

üìù –û—à–∏–±–∫–∞: {str(e)}"""


@mcp.tool()
async def get_fight_stats(fighter1: str, fighter2: str = "") -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–æ–π—Ü–æ–≤
    
    Args:
        fighter1: –ò–º—è –ø–µ—Ä–≤–æ–≥–æ –±–æ–π—Ü–∞
        fighter2: –ò–º—è –≤—Ç–æ—Ä–æ–≥–æ –±–æ–π—Ü–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—è –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–æ–π—Ü–æ–≤
    """
    if not fighter1:
        raise McpError(
            ErrorData(
                code=INVALID_PARAMS,
                message="–£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –±–æ–π—Ü–∞"
            )
        )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ–π—Ü–∞
        fighter1_data = await ufc_service.get_fighter_data(fighter1)
        
        if fighter2:
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –±–æ–π—Ü–æ–≤
            fighter2_data = await ufc_service.get_fighter_data(fighter2)
            
            if fighter1_data.get("error") and fighter2_data.get("error"):
                return f"""‚ùå –û–±–∞ –±–æ–π—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã

üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω:
‚îú‚îÄ "{fighter1}": {fighter1_data.get('error', '–ù–µ –Ω–∞–π–¥–µ–Ω')}
‚îî‚îÄ "{fighter2}": {fighter2_data.get('error', '–ù–µ –Ω–∞–π–¥–µ–Ω')}"""
            
            result = f"üìä –°–†–ê–í–ù–ï–ù–ò–ï –ë–û–ô–¶–û–í:\n\n"
            result += f"ü•ä {fighter1_data.get('name', fighter1)} vs {fighter2_data.get('name', fighter2)}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –±–æ–π—Ü–∞
            result += f"üë§ {fighter1_data.get('name', fighter1)}:\n"
            if not fighter1_data.get("error"):
                result += f"‚îú‚îÄ –ü–æ–±–µ–¥: {fighter1_data.get('wins', 'N/A')}\n"
                result += f"‚îú‚îÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {fighter1_data.get('losses', 'N/A')}\n"
                result += f"‚îú‚îÄ –ù–∏—á—å–∏—Ö: {fighter1_data.get('draws', 'N/A')}\n"
                result += f"‚îú‚îÄ –í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {fighter1_data.get('weight_class', 'N/A')}\n"
                result += f"‚îî‚îÄ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {fighter1_data.get('nationality', 'N/A')}\n\n"
            else:
                result += f"‚îî‚îÄ ‚ùå {fighter1_data['error']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –±–æ–π—Ü–∞
            result += f"üë§ {fighter2_data.get('name', fighter2)}:\n"
            if not fighter2_data.get("error"):
                result += f"‚îú‚îÄ –ü–æ–±–µ–¥: {fighter2_data.get('wins', 'N/A')}\n"
                result += f"‚îú‚îÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {fighter2_data.get('losses', 'N/A')}\n"
                result += f"‚îú‚îÄ –ù–∏—á—å–∏—Ö: {fighter2_data.get('draws', 'N/A')}\n"
                result += f"‚îú‚îÄ –í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {fighter2_data.get('weight_class', 'N/A')}\n"
                result += f"‚îî‚îÄ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {fighter2_data.get('nationality', 'N/A')}\n\n"
            else:
                result += f"‚îî‚îÄ ‚ùå {fighter2_data['error']}\n\n"
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            if not fighter1_data.get("error") and not fighter2_data.get("error"):
                try:
                    wins1 = int(fighter1_data.get('wins', 0)) if str(fighter1_data.get('wins', 0)).isdigit() else 0
                    wins2 = int(fighter2_data.get('wins', 0)) if str(fighter2_data.get('wins', 0)).isdigit() else 0
                    
                    result += "üîç –ê–ù–ê–õ–ò–ó:\n"
                    if wins1 > wins2:
                        result += f"‚îú‚îÄ –ë–æ–ª—å—à–µ –ø–æ–±–µ–¥ —É {fighter1_data.get('name', fighter1)} ({wins1} vs {wins2})\n"
                    elif wins2 > wins1:
                        result += f"‚îú‚îÄ –ë–æ–ª—å—à–µ –ø–æ–±–µ–¥ —É {fighter2_data.get('name', fighter2)} ({wins2} vs {wins1})\n"
                    else:
                        result += f"‚îú‚îÄ –†–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ ({wins1})\n"
                    
                    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Å–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    class1 = fighter1_data.get('weight_class', '')
                    class2 = fighter2_data.get('weight_class', '')
                    if class1 and class2:
                        if class1 == class2:
                            result += f"‚îî‚îÄ –û–±–∞ –≤ –æ–¥–Ω–æ–π –≤–µ—Å–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {class1}\n"
                        else:
                            result += f"‚îî‚îÄ –†–∞–∑–Ω—ã–µ –≤–µ—Å–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {class1} vs {class2}\n"
                except:
                    result += "‚îî‚îÄ –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
            
            result += "\nüí° –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ UFC.com"
            return result
        
        else:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–¥–Ω–æ–≥–æ –±–æ–π—Ü–∞
            if fighter1_data.get("error"):
                return f"""‚ùå –ë–æ–µ—Ü "{fighter1}" –Ω–µ –Ω–∞–π–¥–µ–Ω

üîç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω–∏
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –±–æ–π—Ü–∞
‚îî‚îÄ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–æ–µ—Ü –≤—ã—Å—Ç—É–ø–∞–µ—Ç/–≤—ã—Å—Ç—É–ø–∞–ª –≤ UFC

üìù –û—à–∏–±–∫–∞: {fighter1_data.get('error')}"""
            
            result = f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–ô–¶–ê: {fighter1_data.get('name', fighter1)}\n\n"
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result += "üèÜ –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n"
            result += f"‚îú‚îÄ –ü–æ–±–µ–¥: {fighter1_data.get('wins', 'N/A')}\n"
            result += f"‚îú‚îÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {fighter1_data.get('losses', 'N/A')}\n"
            result += f"‚îî‚îÄ –ù–∏—á—å–∏—Ö: {fighter1_data.get('draws', 'N/A')}\n\n"
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if fighter1_data.get('nickname'):
                result += f"üè∑Ô∏è  –ü—Ä–æ–∑–≤–∏—â–µ: {fighter1_data['nickname']}\n"
            
            if fighter1_data.get('weight_class'):
                result += f"‚öñÔ∏è  –í–µ—Å–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {fighter1_data['weight_class']}\n"
            
            if fighter1_data.get('nationality'):
                result += f"üåç –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {fighter1_data['nationality']}\n"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥
            try:
                wins = int(fighter1_data.get('wins', 0)) if str(fighter1_data.get('wins', 0)).isdigit() else 0
                losses = int(fighter1_data.get('losses', 0)) if str(fighter1_data.get('losses', 0)).isdigit() else 0
                total_fights = wins + losses
                
                if total_fights > 0:
                    win_rate = (wins / total_fights) * 100
                    result += f"\nüìà –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:\n"
                    result += f"‚îú‚îÄ –í—Å–µ–≥–æ –±–æ–µ–≤: {total_fights}\n"
                    result += f"‚îî‚îÄ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥: {win_rate:.1f}%\n"
            except:
                pass
            
            result += f"\nüí° {fighter1_data.get('note', '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ UFC.com')}"
            return result
        
    except McpError:
        raise
    except Exception as e:
        return f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚îú‚îÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚îú‚îÄ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ–π—Ü–∞
‚îî‚îÄ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è

üìù –û—à–∏–±–∫–∞: {str(e)}"""

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–∞–Ω–Ω—ã—Ö
ufc_service = UFCDataService()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
sse = SseServerTransport("/messages/")


async def handle_sse(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    _server = mcp._mcp_server
    async with sse.connect_sse(
        request.scope,
        request.receive,
        request._send,
    ) as (reader, writer):
        await _server.run(
            reader, 
            writer, 
            _server.create_initialization_options()
        )


# –°–æ–∑–¥–∞–Ω–∏–µ Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Starlette(
    debug=True,
    routes=[
        Route("/sse", endpoint=handle_sse),
        Mount("/messages/", app=sse.handle_post_message),
    ],
)

if __name__ == "__main__":
    print("ü•ä –ó–∞–ø—É—Å–∫ MCP UFC Server...")
    print("üåê –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8005")
    print("üì° SSE endpoint: http://localhost:8005/sse")
    print("üìß Messages endpoint: http://localhost:8005/messages/")
    print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   ‚Ä¢ search_fighter - –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ–π—Ü–µ")
    print("   ‚Ä¢ get_upcoming_fights - –±–ª–∏–∂–∞–π—à–∏–µ –±–æ–∏ UFC")
    print("   ‚Ä¢ get_ufc_rankings - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏")
    print("   ‚Ä¢ search_fight_results - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ–µ–≤")
    print("   ‚Ä¢ get_title_fights - —á–µ–º–ø–∏–æ–Ω—Å–∫–∏–µ –±–æ–∏")
    print("   ‚Ä¢ get_fight_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–æ–π—Ü–æ–≤")
    print()
    print("ü•ä –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
    print("   search_fighter('Jon Jones')")
    print("   search_fighter('Conor McGregor')")
    print("   get_fight_stats('Khabib', 'McGregor')")
    
    uvicorn.run(app, host="0.0.0.0", port=8005)
