import base64
import os
import xml.etree.ElementTree as ET
from datetime import datetime
from typing import Dict, List
import httpx

from mcp.server.fastmcp import FastMCP
from mcp.shared.exceptions import McpError
from mcp.types import INTERNAL_ERROR, INVALID_PARAMS, ErrorData

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "yandex-search"
mcp = FastMCP("yandex-search")


class YandexSearchAPI:
    """API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Yandex Search API"""
    
    def __init__(self):
        self.api_key = os.getenv("YANDEX_API_KEY")
        self.folder_id = os.getenv("YANDEX_FOLDER_ID")
        self.base_url = "https://searchapi.api.cloud.yandex.net/v2/web/search"
        # –û–ø—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
        self.verify_ssl = (
            os.getenv("YANDEX_VERIFY_SSL", "true").lower() != "false"
        )
        
        if not self.api_key:
            raise ValueError("Missing YANDEX_API_KEY environment variable")
        if not self.folder_id:
            raise ValueError("Missing YANDEX_FOLDER_ID environment variable")
    
    async def search(
        self, query: str, page_size: int = 10, page_number: int = 0
    ) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Yandex Search API
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            
        Returns:
            XML-–æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        body = {
            "query": {
                "searchType": "SEARCH_TYPE_COM",
                "queryText": query,
                "familyMode": "FAMILY_MODE_NONE",
                "fixTypoMode": "FIX_TYPO_MODE_OFF",
            },
            "groupSpec": {
                "groupMode": "GROUP_MODE_FLAT",
                "groupsOnPage": page_size,
            },
            "maxPassages": 2,
            "l10n": "LOCALIZATION_EN",
            "folderId": self.folder_id,
            "page": str(page_number),
        }
        
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json",
        }
        
        try:
            async with httpx.AsyncClient(
                timeout=30.0, 
                verify=self.verify_ssl
            ) as client:
                response = await client.post(
                    self.base_url,
                    json=body,
                    headers=headers
                )
                
                if not response.is_success:
                    raise Exception(
                        f"Yandex Search API error: "
                        f"{response.status_code} - {response.text}"
                    )
                
                result = response.json()
                raw_data = result.get("rawData", "")
                if not raw_data:
                    raise Exception("No rawData in response")
                    
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
                xml_data = base64.b64decode(raw_data).decode('utf-8')
                return xml_data
                
        except Exception as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SSL –æ—à–∏–±–æ–∫
            if "SSL" in str(e) or "certificate" in str(e):
                ssl_msg = (
                    f"SSL certificate error: {e}. "
                    "Try setting YANDEX_VERIFY_SSL=false environment variable "
                    "for development/testing."
                )
                raise Exception(ssl_msg)
            raise


class YandexSearchParser:
    """–ü–∞—Ä—Å–µ—Ä –¥–ª—è XML –æ—Ç–≤–µ—Ç–æ–≤ Yandex Search API"""
    
    @staticmethod
    def parse_search_response(xml_data: str) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç XML –æ—Ç–≤–µ—Ç –æ—Ç Yandex Search API
        
        Args:
            xml_data: XML —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        """
        try:
            root = ET.fromstring(xml_data)
            results = []
            
            # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã doc –≤ XML
            for doc in root.findall(".//doc"):
                result = {}
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                url_elem = doc.find("url")
                if url_elem is not None:
                    result["url"] = url_elem.text or ""
                
                title_elem = doc.find("title")
                if title_elem is not None:
                    # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    title_text = ET.tostring(
                        title_elem, encoding='unicode', method='text'
                    )
                    result["title"] = title_text.strip()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–Ω–∏–ø–ø–µ—Ç –∏–∑ passages
                passages = doc.findall(".//passage")
                snippet_parts = []
                for passage in passages:
                    passage_text = ET.tostring(
                        passage, encoding='unicode', method='text'
                    )
                    if passage_text.strip():
                        snippet_parts.append(passage_text.strip())
                
                result["snippet"] = (
                    " ".join(snippet_parts) if snippet_parts else ""
                )
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º saved copy URL –µ—Å–ª–∏ –µ—Å—Ç—å
                saved_copy_url = doc.find("saved-copy-url")
                if saved_copy_url is not None:
                    result["savedCopyUrl"] = saved_copy_url.text or ""
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å URL
                if result.get("url"):
                    results.append(result)
                
                extended_text = doc.findall(".//extended-text")
                snippet_parts = []
                for passage in extended_text:
                    passage_text = ET.tostring(
                        passage, encoding='unicode', method='text'
                    )
                    if passage_text.strip():
                        snippet_parts.append(passage_text.strip())
                        result["extended-text"] = " ".join(snippet_parts) if snippet_parts else ""
                
            return results
            
        except ET.ParseError as e:
            raise Exception(f"Failed to parse XML response: {e}")
        except Exception as e:
            raise Exception(f"Error processing search results: {e}")


def format_search_results(results: List[Dict], query: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if not results:
        return f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' —á–µ—Ä–µ–∑ Yandex –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    formatted = f"""üîç Yandex Search —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ "{query}"

üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}
"""
    
    for i, result in enumerate(results, 1):
        title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:150]
        url = result.get('url', '')
        extended_text = result.get('extended-text', '')        
        formatted += f"""
- {i}. {title}
URL: {url}
–û–ø–∏—Å–∞–Ω–∏–µ: {extended_text}
"""
                
        formatted += "\n"
    
    return formatted


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
try:
    yandex_api = YandexSearchAPI()
    yandex_parser = YandexSearchParser()
except ValueError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Yandex API: {e}")
    print(
        "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è "
        "YANDEX_API_KEY –∏ YANDEX_FOLDER_ID"
    )
    yandex_api = None
    yandex_parser = None


@mcp.tool()
async def search_web(
    query: str, page_size: int = 10, page_number: int = 0
) -> str:
    """
    üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Yandex Search API
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ –∏—Å–ø–æ–ª—å–∑—É—è Yandex Search API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫, 
    URL, —Å–Ω–∏–ø–ø–µ—Ç –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–ø–∏—é.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
        page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 
                   (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10, –º–∞–∫—Å 50)
        page_number: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–∞—á–∏–Ω–∞—è —Å 0 (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, URL –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
    """
    if not query.strip():
        raise McpError(
            error=ErrorData(
                code=INTERNAL_ERROR, 
                message="–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
        )
    
    if yandex_api is None or yandex_parser is None:
        raise McpError(
            error=ErrorData(
                code=INTERNAL_ERROR, 
                message=(
                    "Yandex API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. "
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
                )
            )
        )
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    page_size = min(max(page_size, 1), 50)
    page_number = max(page_number, 0)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Yandex API
        xml_response = await yandex_api.search(
            query=query.strip(),
            page_size=page_size,
            page_number=page_number
        )
        
        # –ü–∞—Ä—Å–∏–º XML –æ—Ç–≤–µ—Ç
        results = yandex_parser.parse_search_response(xml_response)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        return format_search_results(results, query)
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ Yandex: {str(e)}"
        print(error_msg)
        raise McpError(error=ErrorData(code=INVALID_PARAMS, message=error_msg))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    print("üîç –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ Yandex Search...")
    print("üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8006")
    print("üîó SSE endpoint: http://localhost:8006/sse")
    print("üìß Messages endpoint: http://localhost:8006/messages/")
    print("üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print(
        "   - search_web(query, page_size, page_number) - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Yandex"
    )
    print("üîë –¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("   - YANDEX_API_KEY - API –∫–ª—é—á Yandex Cloud")
    print("   - YANDEX_FOLDER_ID - ID –ø–∞–ø–∫–∏ –≤ Yandex Cloud")
    print("üåç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Yandex Search API")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É SSE –≤ FastMCP 2.0
        # –ü–æ—Ä—Ç –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è FASTMCP_SERVER_PORT
        # –∏–ª–∏ —á–µ—Ä–µ–∑ CLI: fastmcp run server.py --transport sse --port 8006
        mcp.settings.host = "0.0.0.0"
        mcp.settings.port = 8006
        mcp.run(transport="sse")
    except ValueError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        exit(1)