from datetime import datetime
from typing import Dict, Optional, Tuple
import httpx

import uvicorn
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.routing import Route, Mount

from mcp.server.fastmcp import FastMCP
from mcp.shared.exceptions import McpError
from mcp.types import ErrorData, INTERNAL_ERROR, INVALID_PARAMS
from mcp.server.sse import SseServerTransport

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "weather"
mcp = FastMCP("weather")


async def get_city_coordinates(
    city_name: str
) -> Optional[Tuple[float, float]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Open-Meteo Geocoding API
    
    Args:
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        
    Returns:
        Tuple[latitude, longitude] –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        geocoding_url = "https://geocoding-api.open-meteo.com/v1/search"
        params = {
            "name": city_name,
            "count": 1,
            "language": "ru",
            "format": "json"
        }
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(geocoding_url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if "results" not in data or not data["results"]:
                return None
                
            result = data["results"][0]
            return result["latitude"], result["longitude"]
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}: {e}")
        return None


async def get_weather_data(
    latitude: float, 
    longitude: float, 
    days: int = 1
) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —á–µ—Ä–µ–∑ Open-Meteo API
    
    Args:
        latitude: –®–∏—Ä–æ—Ç–∞
        longitude: –î–æ–ª–≥–æ—Ç–∞
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
    """
    weather_url = "https://api.open-meteo.com/v1/forecast"
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    current_params = [
        "temperature_2m",
        "relative_humidity_2m", 
        "weather_code",
        "wind_speed_10m",
        "surface_pressure"
    ]
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    daily_params = [
        "weather_code",
        "temperature_2m_max",
        "temperature_2m_min",
        "precipitation_probability_max",
        "wind_speed_10m_max"
    ]
    
    params = {
        "latitude": latitude,
        "longitude": longitude,
        "current": ",".join(current_params),
        "daily": ",".join(daily_params),
        "timezone": "auto",
        "forecast_days": days
    }
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    async with httpx.AsyncClient(timeout=30.0) as client:
        response = await client.get(weather_url, params=params)
        response.raise_for_status()
        
        return response.json()


def weather_code_to_description(code: int) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–¥ –ø–æ–≥–æ–¥—ã WMO –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    
    Args:
        code: WMO –∫–æ–¥ –ø–æ–≥–æ–¥—ã
        
    Returns:
        –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """
    weather_codes = {
        0: "—è—Å–Ω–æ",
        1: "–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ",
        2: "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å",
        3: "–ø–∞—Å–º—É—Ä–Ω–æ",
        45: "—Ç—É–º–∞–Ω",
        48: "–∏–∑–º–æ—Ä–æ–∑—å",
        51: "–ª–µ–≥–∫–∞—è –º–æ—Ä–æ—Å—å",
        53: "—É–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å",
        55: "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –º–æ—Ä–æ—Å—å",
        56: "–ª–µ–≥–∫–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
        57: "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–æ—Ä–æ—Å—å",
        61: "–ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å",
        63: "—É–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å",
        65: "—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
        66: "–ª–µ–≥–∫–∏–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
        67: "—Å–∏–ª—å–Ω—ã–π –ª–µ–¥—è–Ω–æ–π –¥–æ–∂–¥—å",
        71: "–ª–µ–≥–∫–∏–π —Å–Ω–µ–≥",
        73: "—É–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥",
        75: "—Å–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥",
        77: "—Å–Ω–µ–∂–Ω–∞—è –∫—Ä—É–ø–∞",
        80: "–ª–µ–≥–∫–∏–µ –ª–∏–≤–Ω–∏",
        81: "—É–º–µ—Ä–µ–Ω–Ω—ã–µ –ª–∏–≤–Ω–∏",
        82: "—Å–∏–ª—å–Ω—ã–µ –ª–∏–≤–Ω–∏",
        85: "–ª–µ–≥–∫–∏–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏",
        86: "—Å–∏–ª—å–Ω—ã–µ —Å–Ω–µ–∂–Ω—ã–µ –ª–∏–≤–Ω–∏",
        95: "–≥—Ä–æ–∑–∞",
        96: "–≥—Ä–æ–∑–∞ —Å –ª–µ–≥–∫–∏–º –≥—Ä–∞–¥–æ–º",
        99: "–≥—Ä–æ–∑–∞ —Å —Å–∏–ª—å–Ω—ã–º –≥—Ä–∞–¥–æ–º"
    }
    
    return weather_codes.get(code, f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–∫–æ–¥ {code})")


async def get_real_weather_data(city_name: str, days: int = 1) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    
    Args:
        city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ–≥–Ω–æ–∑–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–≥–æ–¥–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞
    coordinates = await get_city_coordinates(city_name)
    if not coordinates:
        raise McpError(
            ErrorData(
                code=INVALID_PARAMS,
                message=f"–ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        )
    
    latitude, longitude = coordinates
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    weather_data = await get_weather_data(latitude, longitude, days)
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
    current = weather_data["current"]
    current_time = datetime.fromisoformat(
        current["time"].replace("Z", "+00:00")
    )
    
    current_weather = {
        "temperature": round(current["temperature_2m"]),
        "condition": weather_code_to_description(current["weather_code"]),
        "humidity": current["relative_humidity_2m"],
        "wind_speed": round(current["wind_speed_10m"]),
        "pressure": round(current["surface_pressure"])
    }
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–≥–Ω–æ–∑
    daily = weather_data["daily"]
    forecast = []
    
    for i in range(len(daily["time"])):
        forecast_date = datetime.fromisoformat(daily["time"][i])
        
        forecast.append({
            "date": daily["time"][i],
            "weekday": forecast_date.strftime("%A"),
            "day_temp": round(daily["temperature_2m_max"][i]),
            "night_temp": round(daily["temperature_2m_min"][i]),
            "condition": weather_code_to_description(daily["weather_code"][i]),
            "wind_speed": round(daily["wind_speed_10m_max"][i]),
            "precipitation_chance": daily["precipitation_probability_max"][i] 
            if daily["precipitation_probability_max"][i] is not None else 0
        })
    
    return {
        "city": city_name.title(),
        "coordinates": {"latitude": latitude, "longitude": longitude},
        "current_time": current_time.strftime("%Y-%m-%d %H:%M UTC"),
        "current_weather": current_weather,
        "forecast": forecast
    }


@mcp.tool()
async def get_today_weather(city: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –º–∏—Ä–∞.
    –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è Open-Meteo API.
    
    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ)
    
    Usage:
        get_today_weather("–ú–æ—Å–∫–≤–∞")
        get_today_weather("Paris")
        get_today_weather("New York")
        get_today_weather("–¢–æ–∫–∏–æ")
    """
    try:
        if not city or not city.strip():
            raise McpError(
                ErrorData(
                    code=INVALID_PARAMS,
                    message="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                )
            )
        
        weather_data = await get_real_weather_data(city.strip(), 1)
        current = weather_data["current_weather"]
        today_forecast = weather_data["forecast"][0]
        coords = weather_data["coordinates"]
        
        result = f"""üå§Ô∏è –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –≥–æ—Ä–æ–¥–µ {weather_data['city']}

üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords['latitude']:.2f}, {coords['longitude']:.2f}
üïí –í—Ä–µ–º—è: {weather_data['current_time']}

üå°Ô∏è –°–µ–π—á–∞—Å: {current['temperature']}¬∞C
‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {current['condition']}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current['humidity']}%
üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {current['wind_speed']} –º/—Å
üìä –î–∞–≤–ª–µ–Ω–∏–µ: {current['pressure']} –≥–ü–∞

üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:
üåÖ –ú–∞–∫—Å–∏–º—É–º: {today_forecast['day_temp']}¬∞C
üåô –ú–∏–Ω–∏–º—É–º: {today_forecast['night_temp']}¬∞C
üåßÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {today_forecast['precipitation_chance']}%

üîó –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã Open-Meteo API"""
        
        return result
        
    except Exception as e:
        if isinstance(e, McpError):
            raise
        raise McpError(
            ErrorData(
                code=INTERNAL_ERROR,
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {str(e)}"
            )
        ) from e


@mcp.tool()
async def get_weekly_forecast(city: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –º–∏—Ä–∞.
    –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è Open-Meteo API.
    
    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ)
    
    Usage:
        get_weekly_forecast("–õ–æ–Ω–¥–æ–Ω")
        get_weekly_forecast("Tokyo")
        get_weekly_forecast("Sydney")
        get_weekly_forecast("–ë–µ—Ä–ª–∏–Ω")
    """
    try:
        if not city or not city.strip():
            raise McpError(
                ErrorData(
                    code=INVALID_PARAMS,
                    message="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                )
            )
        
        weather_data = await get_real_weather_data(city.strip(), 7)
        coords = weather_data["coordinates"]
        
        city_name = weather_data['city']
        lat, lon = coords['latitude'], coords['longitude']
        result = f"""üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}

üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.2f}, {lon:.2f}
üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {weather_data['current_time']}

üìä –ù–µ–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑:
"""
        
        for day in weather_data['forecast']:
            weekday_ru = {
                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 
                'Wednesday': '–°—Ä–µ–¥–∞',
                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                'Saturday': '–°—É–±–±–æ—Ç–∞',
                'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }.get(day['weekday'], day['weekday'])
            
            result += f"""
üìÜ {day['date']} ({weekday_ru})
   üåÖ –ú–∞–∫—Å: {day['day_temp']}¬∞C | üåô –ú–∏–Ω: {day['night_temp']}¬∞C
   ‚òÅÔ∏è {day['condition']} | üí® {day['wind_speed']} –º/—Å
   üåßÔ∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['precipitation_chance']}%"""
        
        result += "\n\nüîó –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã Open-Meteo API"
        
        return result
        
    except Exception as e:
        if isinstance(e, McpError):
            raise
        raise McpError(
            ErrorData(
                code=INTERNAL_ERROR,
                message=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã: {str(e)}"
            )
        ) from e


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
sse = SseServerTransport("/messages/")


async def handle_sse(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    _server = mcp._mcp_server
    async with sse.connect_sse(
        request.scope,
        request.receive,
        request._send,
    ) as (reader, writer):
        await _server.run(
            reader, 
            writer, 
            _server.create_initialization_options()
        )


# –°–æ–∑–¥–∞–Ω–∏–µ Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Starlette(
    debug=True,
    routes=[
        Route("/sse", endpoint=handle_sse),
        Mount("/messages/", app=sse.handle_post_message),
    ],
)

if __name__ == "__main__":
    print("üå§Ô∏è –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã —Å Open-Meteo API...")
    print("üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8001")
    print("üîó SSE endpoint: http://localhost:8001/sse")
    print("üìß Messages endpoint: http://localhost:8001/messages/")
    print("üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   - get_today_weather(city) - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞")
    print("   - get_weekly_forecast(city) - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é")
    print("üåç –î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è Open-Meteo API (–±–µ–∑ API –∫–ª—é—á–∞)")
    print("üÜì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≥–æ—Ä–æ–¥–∞ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞!")
    
    uvicorn.run(app, host="0.0.0.0", port=8001) 