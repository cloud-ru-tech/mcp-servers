#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º Open-Meteo API.
–≠—Ç–∏ —Ç–µ—Å—Ç—ã –¥–µ–ª–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ API.
"""

import pytest
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ server.py  
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from server import (
    get_city_coordinates,
    get_weather_data,
    get_today_weather,
    get_weekly_forecast
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ event loop –¥–ª—è —Ç–µ—Å—Ç–æ–≤
@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–µ–º event loop –¥–ª—è –≤—Å–µ–π —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.new_event_loop()
    yield loop
    loop.close()


@pytest.fixture(scope="session", autouse=True)
def cleanup_http_client():
    """–ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    yield
    # HTTP –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞


class TestRealAPIIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º API"""
    
    @pytest.mark.asyncio
    @pytest.mark.integration
    async def test_real_city_coordinates(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
        result = await get_city_coordinates("Moscow")
        
        assert result is not None
        latitude, longitude = result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –ø—Ä–∏–º–µ—Ä–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        assert 55.0 < latitude < 56.0
        assert 37.0 < longitude < 38.0
    
    @pytest.mark.asyncio
    @pytest.mark.integration
    async def test_real_weather_data(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã
        result = await get_weather_data(55.7558, 37.6176, 1)
        
        assert "current" in result
        assert "daily" in result
        assert "temperature_2m" in result["current"]
        assert "weather_code" in result["current"]
        assert len(result["daily"]["time"]) == 1
    
    @pytest.mark.asyncio
    @pytest.mark.integration
    async def test_real_today_weather(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–≥–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        result = await get_today_weather("Paris")
        
        assert "Paris" in result
        assert "¬∞C" in result
        assert "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:" in result
        assert "Open-Meteo API" in result
    
    @pytest.mark.asyncio
    @pytest.mark.integration
    async def test_real_weekly_forecast(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        result = await get_weekly_forecast("Paris")
        
        assert "Paris" in result
        assert "–ø—Ä–æ–≥–Ω–æ–∑" in result.lower()
        assert "Open-Meteo API" in result
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
        days_found = result.count("üìÜ")
        assert days_found >= 3  # –ú–∏–Ω–∏–º—É–º 3 –¥–Ω—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    
    @pytest.mark.asyncio
    @pytest.mark.integration
    async def test_unicode_cities_real(self):
        """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ unicode –≥–æ—Ä–æ–¥–∞–º–∏"""
        cities = ["Moscow", "Berlin", "Tokyo"]
        
        for city in cities:
            try:
                result = await get_today_weather(city)
                assert city in result or city.title() in result
                assert "¬∞C" in result
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")
    
    @pytest.mark.asyncio
    @pytest.mark.integration
    async def test_invalid_city_real(self):
        """–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≥–æ—Ä–æ–¥–æ–º"""
        from mcp.shared.exceptions import McpError
        
        with pytest.raises(McpError):
            await get_today_weather("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π–ì–æ—Ä–æ–¥12345XYZ")


class TestPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    @pytest.mark.asyncio
    @pytest.mark.integration
    @pytest.mark.slow
    async def test_multiple_cities_performance(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏"""
        cities = ["Moscow", "London", "Paris", "Tokyo", "New York"]
        
        start_time = asyncio.get_event_loop().time()
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for city in cities:
            try:
                result = await get_today_weather(city)
                assert city in result
            except Exception as e:
                pytest.fail(f"–û—à–∏–±–∫–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}: {e}")
        
        end_time = asyncio.get_event_loop().time()
        total_time = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è
        assert total_time < 30  # –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ 5 –≥–æ—Ä–æ–¥–æ–≤
        
        print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è {len(cities)} –≥–æ—Ä–æ–¥–æ–≤: {total_time:.2f}s")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    pytest.main([
        __file__, 
        "-v", 
        "-m", "integration",
        "--tb=short"
    ]) 