#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MCP Artifact Registry Server

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
–¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Cloud.ru Artifact Registry.

–¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
- CLOUD_RU_KEY_ID
- CLOUD_RU_SECRET
- TEST_PROJECT_ID (–¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
"""

import asyncio
import os
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from server import (
    CloudRuAuth,
    list_registries,
    get_registry,
    create_registry,
    delete_registry,
    list_operations,
    get_operation,
    update_quarantine_mode
)


async def test_authentication():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    key_id = os.getenv("CLOUD_RU_KEY_ID", "")
    secret = os.getenv("CLOUD_RU_SECRET", "")
    
    if not key_id or not secret:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è CLOUD_RU_KEY_ID –∏ CLOUD_RU_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö:")
        print("   export CLOUD_RU_KEY_ID='your_key_id'")
        print("   export CLOUD_RU_SECRET='your_secret'")
        return False
    
    try:
        auth = CloudRuAuth(key_id, secret)
        token = await auth.get_token()
        print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token[:20]}...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


async def test_list_registries():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤...")
    
    project_id = os.getenv("TEST_PROJECT_ID", "")
    if not project_id:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_PROJECT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë:")
        print("   export TEST_PROJECT_ID='your_project_uuid'")
        return
    
    try:
        result = await list_registries(project_id)
        print("‚úÖ –°–ø–∏—Å–æ–∫ —Ä–µ–µ—Å—Ç—Ä–æ–≤:")
        print(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤: {e}")


async def test_list_operations():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    try:
        result = await list_operations(page_size=5)
        print("‚úÖ –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π:")
        print(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")


async def test_create_registry_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è, –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ)"""
    print("\nüèóÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞...")
    
    project_id = os.getenv("TEST_PROJECT_ID", "")
    if not project_id:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_PROJECT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return
    
    registry_name = f"demo-registry-{int(datetime.now().timestamp())}"
    
    print(f"üìù –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞:")
    print(f"   Project ID: {project_id}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {registry_name}")
    print(f"   –¢–∏–ø: DOCKER")
    print(f"   –ü—É–±–ª–∏—á–Ω—ã–π: –ù–µ—Ç")
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è:
    
    # try:
    #     result = await create_registry(
    #         project_id,
    #         registry_name,
    #         "DOCKER",
    #         False
    #     )
    #     print("‚úÖ –†–µ–µ—Å—Ç—Ä —Å–æ–∑–¥–∞–Ω:")
    #     print(result)
    # except Exception as e:
    #     print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    print("‚ÑπÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º)")


async def test_quarantine_mode_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞"""
    print("\nüõ°Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞...")
    
    project_id = os.getenv("TEST_PROJECT_ID", "")
    if not project_id:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_PROJECT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    fake_registry_id = "00000000-0000-0000-0000-000000000000"
    
    print(f"üìù –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞:")
    print(f"   Project ID: {project_id}")
    print(f"   Registry ID: {fake_registry_id}")
    print(f"   –†–µ–∂–∏–º –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞: LOW")
    
    try:
        result = await update_quarantine_mode(
            project_id,
            fake_registry_id,
            "LOW"
        )
        print("‚úÖ –†–µ–∂–∏–º –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω:")
        print(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
        print("‚ÑπÔ∏è  –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π registry_id")


async def test_get_specific_operation():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ID –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    fake_operation_id = "00000000-0000-0000-0000-000000000000"
    
    try:
        result = await get_operation(fake_operation_id)
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        print(result)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–æ–∂–∏–¥–∞–µ–º–æ): {e}")
        print("‚ÑπÔ∏è  –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π operation_id")


def print_header():
    """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("=" * 60)
    print("üèõÔ∏è  MCP ARTIFACT REGISTRY SERVER - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
    print("=" * 60)
    print()
    print("üìã –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   ‚Ä¢ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ Cloud.ru")
    print("   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤")
    print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞")
    print("   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–µ—Å—Ç—Ä–µ")
    print("   ‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞")
    print("   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print("   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞")
    print()


def print_environment_info():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    
    key_id = os.getenv("CLOUD_RU_KEY_ID", "")
    secret = os.getenv("CLOUD_RU_SECRET", "")
    project_id = os.getenv("TEST_PROJECT_ID", "")
    
    if key_id:
        print(f"   ‚úÖ CLOUD_RU_KEY_ID: {key_id[:8]}...")
    else:
        print("   ‚ùå CLOUD_RU_KEY_ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    if secret:
        print("   ‚úÖ CLOUD_RU_SECRET: [—Å–∫—Ä—ã—Ç–æ]")
    else:
        print("   ‚ùå CLOUD_RU_SECRET: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    if project_id:
        print(f"   ‚úÖ TEST_PROJECT_ID: {project_id}")
    else:
        print("   ‚ùå TEST_PROJECT_ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    print()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header()
    print_environment_info()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    auth_success = await test_authentication()
    
    if not auth_success:
        print("\n‚ùå –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    await test_list_registries()
    await test_list_operations()
    await test_create_registry_demo()
    await test_quarantine_mode_demo()
    await test_get_specific_operation()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("=" * 60)
    print()
    print("üìö –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:")
    print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    print("   2. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö")
    print("   3. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è!")
    print()
    print("üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞:")
    print("   ‚Ä¢ HTTP: http://localhost:8004")
    print("   ‚Ä¢ SSE: http://localhost:8004/sse")
    print("   ‚Ä¢ Messages: http://localhost:8004/messages/")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1) 