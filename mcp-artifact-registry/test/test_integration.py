import asyncio
import os
import pytest
import sys
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É  
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))  # noqa: E402

from server import (  # noqa: E402
    CloudRuAuth,
    list_registries,
    create_registry,
    list_operations,
    update_quarantine_mode
)


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
CLOUD_RU_KEY_ID = os.getenv("CLOUD_RU_KEY_ID", "")
CLOUD_RU_SECRET = os.getenv("CLOUD_RU_SECRET", "")
TEST_PROJECT_ID = os.getenv("TEST_PROJECT_ID", "")

# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
skip_integration = not (
    CLOUD_RU_KEY_ID and CLOUD_RU_SECRET and TEST_PROJECT_ID
)
skip_reason = (
    "–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: "
    "CLOUD_RU_KEY_ID, CLOUD_RU_SECRET, TEST_PROJECT_ID"
)


@pytest.mark.integration
@pytest.mark.skipif(skip_integration, reason=skip_reason)
class TestIntegrationAuth:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    @pytest.mark.asyncio
    async def test_real_authentication(self):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å Cloud.ru"""
        auth = CloudRuAuth(CLOUD_RU_KEY_ID, CLOUD_RU_SECRET)
        
        token = await auth.get_token()
        
        assert token is not None
        assert len(token) > 0
        assert isinstance(token, str)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = await auth.get_auth_headers()
        assert "Authorization" in headers
        assert headers["Authorization"].startswith("Bearer ")
        assert "Content-Type" in headers


@pytest.mark.integration
@pytest.mark.skipif(skip_integration, reason=skip_reason)
class TestIntegrationRegistries:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–µ—Å—Ç—Ä–∞–º–∏"""
    
    @pytest.fixture
    def project_id(self):
        """–§–∏–∫—Å—Ç—É—Ä–∞ —Å ID –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return TEST_PROJECT_ID
    
    @pytest.mark.asyncio
    async def test_list_registries_real(self, project_id):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–µ—Å—Ç—Ä–æ–≤"""
        result = await list_registries(project_id)
        
        assert isinstance(result, str)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        assert project_id in result or "–Ω–µ—Ç —Ä–µ–µ—Å—Ç—Ä–æ–≤" in result
    
    @pytest.mark.asyncio
    async def test_create_and_cleanup_registry(self, project_id):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ (–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª)"""
        registry_name = f"test-registry-{int(time.time())}"
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–µ—Å—Ç—Ä
            create_result = await create_registry(
                project_id,
                registry_name,
                "DOCKER",
                False
            )
            
            assert "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–µ—Å—Ç—Ä–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ" in create_result
            assert registry_name in create_result
            
            # –ñ–¥–µ–º —Å–æ–∑–¥–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è)
            await asyncio.sleep(2)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–µ—Å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ
            registries_list = await list_registries(project_id)
            
            # –ï—Å–ª–∏ —Ä–µ–µ—Å—Ç—Ä —Å–æ–∑–¥–∞–ª—Å—è, –ø—ã—Ç–∞–µ–º—Å—è –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
            if registry_name in registries_list:
                # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω registry_id, –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∏–ª–∏ –±—ã –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏
                # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è
                print(f"‚úÖ –†–µ–µ—Å—Ç—Ä {registry_name} –±—ã–ª —Å–æ–∑–¥–∞–Ω")
            else:
                print(f"‚ÑπÔ∏è  –†–µ–µ—Å—Ç—Ä {registry_name} –µ—â–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
            # –í –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –æ—à–∏–±–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–º–∏
            # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–≤–æ—Ç—ã, –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Ç.–¥.)


@pytest.mark.integration
@pytest.mark.skipif(skip_integration, reason=skip_reason)
class TestIntegrationOperations:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏"""
    
    @pytest.mark.asyncio
    async def test_list_operations_real(self):
        """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        result = await list_operations()
        
        assert isinstance(result, str)
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        assert "–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result or "–û–ø–µ—Ä–∞—Ü–∏–∏" in result
    
    @pytest.mark.asyncio
    async def test_list_operations_with_filters(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        result = await list_operations(page_size=5)
        
        assert isinstance(result, str)
        assert "—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 5" in result or "–û–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in result


@pytest.mark.integration
@pytest.mark.skipif(skip_integration, reason=skip_reason)
class TestIntegrationQuarantineMode:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞"""
    
    @pytest.mark.asyncio
    async def test_update_quarantine_mode_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä–∞–Ω—Ç–∏–Ω–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤–µ–¥–æ–º–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π registry_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        fake_project_id = "00000000-0000-0000-0000-000000000000"
        fake_registry_id = "00000000-0000-0000-0000-000000000000"
        
        try:
            await update_quarantine_mode(fake_project_id, fake_registry_id, "LOW")
        except Exception as e:
            # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É "–Ω–µ –Ω–∞–π–¥–µ–Ω" –∏–ª–∏ –ø–æ–¥–æ–±–Ω—É—é
            assert "404" in str(e) or "–Ω–µ –Ω–∞–π–¥–µ–Ω" in str(e).lower()


class TestIntegrationEnvironment:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    
    def test_environment_variables(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if not skip_integration:
            assert CLOUD_RU_KEY_ID, "CLOUD_RU_KEY_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            assert CLOUD_RU_SECRET, "CLOUD_RU_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            assert TEST_PROJECT_ID, "TEST_PROJECT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID –¥–ª—è project_id
            assert len(TEST_PROJECT_ID) == 36, "TEST_PROJECT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID"
            assert TEST_PROJECT_ID.count("-") == 4, "TEST_PROJECT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ UUID"
        else:
            pytest.skip("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã: –Ω–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    def test_integration_test_setup_instructions(self):
        """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        if skip_integration:
            instructions = """
            –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
            
            export CLOUD_RU_KEY_ID="your_key_id"
            export CLOUD_RU_SECRET="your_secret"
            export TEST_PROJECT_ID="your_project_uuid"
            
            –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ:
            pytest test/test_integration.py -v -m integration
            """
            pytest.skip(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.\n{instructions}")


if __name__ == "__main__":
    if skip_integration:
        print("‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
        print("üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export CLOUD_RU_KEY_ID='your_key_id'")
        print("   export CLOUD_RU_SECRET='your_secret'")
        print("   export TEST_PROJECT_ID='your_project_uuid'")
    else:
        print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        pytest.main([__file__, "-v", "-m", "integration"]) 