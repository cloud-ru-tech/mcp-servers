# Makefile –¥–ª—è MCP Artifact Registry Server

.PHONY: help install run-server test test-unit test-integration test-demo \
        docker-build docker-run docker-stop docker-clean \
        lint format clean check health

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
PROJECT_NAME := mcp-artifact-registry
DOCKER_IMAGE := $(PROJECT_NAME)
DOCKER_CONTAINER := $(PROJECT_NAME)
PORT := 8004

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | \
		awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	uv sync

install-dev: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	uv sync --dev

run-server: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "üöÄ –ó–∞–ø—É—Å–∫ MCP Artifact Registry Server..."
	@if [ -z "$$CLOUD_RU_KEY_ID" ] || [ -z "$$CLOUD_RU_SECRET" ] || [ -z "$$CLOUD_RU_PROJECT_ID" ]; then \
		echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"; \
		echo "   export CLOUD_RU_KEY_ID='your_key_id'"; \
		echo "   export CLOUD_RU_SECRET='your_secret'"; \
		echo "   export CLOUD_RU_PROJECT_ID='your_project_id'"; \
		echo ""; \
	fi
	uv run python server.py

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	uv run pytest test/ -v

test-unit: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã
	uv run pytest test/test_ar_api.py -v

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "‚ö†Ô∏è  –¢—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ CLOUD_RU_KEY_ID –∏ CLOUD_RU_SECRET"
	uv run pytest test/test_integration.py -v -m integration

test-demo: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
	cd test && uv run python test_tools.py

test-cov: ## –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞
	uv run pytest test/ --cov=server --cov-report=html --cov-report=term

lint: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –ª–∏–Ω—Ç–µ—Ä–æ–º
	uv run flake8 server.py test/
	uv run black --check server.py test/
	uv run isort --check-only server.py test/

format: ## –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
	uv run black server.py test/
	uv run isort server.py test/

check: ## –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (–ª–∏–Ω—Ç–µ—Ä + —Ç–µ—Å—Ç—ã)
	make lint
	make test-unit

# Docker –∫–æ–º–∞–Ω–¥—ã
docker-build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑
	docker build -t $(DOCKER_IMAGE) .

docker-run: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
	@echo "üê≥ –ó–∞–ø—É—Å–∫ $(PROJECT_NAME) –≤ Docker..."
	@if [ -z "$$CLOUD_RU_KEY_ID" ] || [ -z "$$CLOUD_RU_SECRET" ] || [ -z "$$CLOUD_RU_PROJECT_ID" ]; then \
		echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"; \
		echo "   export CLOUD_RU_KEY_ID='your_key_id'"; \
		echo "   export CLOUD_RU_SECRET='your_secret'"; \
		echo "   export CLOUD_RU_PROJECT_ID='your_project_id'"; \
		echo ""; \
	fi
	docker run -d \
		--name $(DOCKER_CONTAINER) \
		-p $(PORT):$(PORT) \
		-e CLOUD_RU_KEY_ID="$$CLOUD_RU_KEY_ID" \
		-e CLOUD_RU_SECRET="$$CLOUD_RU_SECRET" \
		-e CLOUD_RU_PROJECT_ID="$$CLOUD_RU_PROJECT_ID" \
		-v ./logs:/app/logs \
		$(DOCKER_IMAGE)

docker-run-build: ## –°–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker
	make docker-build
	make docker-run

docker-stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	docker stop $(DOCKER_CONTAINER) || true
	docker rm $(DOCKER_CONTAINER) || true

docker-clean: ## –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã
	make docker-stop
	docker rmi $(DOCKER_IMAGE) || true

docker-logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	docker logs -f $(DOCKER_CONTAINER)

# Docker Compose –∫–æ–º–∞–Ω–¥—ã
compose-up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ docker-compose
	@echo "üê≥ –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ docker-compose..."
	@if [ -z "$$CLOUD_RU_KEY_ID" ] || [ -z "$$CLOUD_RU_SECRET" ] || [ -z "$$CLOUD_RU_PROJECT_ID" ]; then \
		echo "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:"; \
		echo "   export CLOUD_RU_KEY_ID='your_key_id'"; \
		echo "   export CLOUD_RU_SECRET='your_secret'"; \
		echo "   export CLOUD_RU_PROJECT_ID='your_project_id'"; \
		echo ""; \
	fi
	docker-compose up -d

compose-down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å docker-compose
	docker-compose down

compose-build: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ docker-compose
	docker-compose build

compose-logs: ## –õ–æ–≥–∏ docker-compose
	docker-compose logs -f

compose-restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å docker-compose
	docker-compose restart

compose-ps: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	docker-compose ps

# –£—Ç–∏–ª–∏—Ç—ã
health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞..."
	@curl -s -I http://localhost:$(PORT)/sse || echo "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
	@echo "üìä –°—Ç–∞—Ç—É—Å MCP Artifact Registry Server:"
	@echo "‚îú‚îÄ –ü–æ—Ä—Ç: $(PORT)"
	@echo "‚îú‚îÄ Docker –æ–±—Ä–∞–∑: $(DOCKER_IMAGE)"
	@echo "‚îú‚îÄ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: $(DOCKER_CONTAINER)"
	@if docker ps | grep -q $(DOCKER_CONTAINER); then \
		echo "‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ‚úÖ –ó–∞–ø—É—â–µ–Ω"; \
	else \
		echo "‚îî‚îÄ –°—Ç–∞—Ç—É—Å: ‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; \
	fi

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	rm -rf .pytest_cache/
	rm -rf htmlcov/
	rm -rf .coverage

# –ö–æ–º–∞–Ω–¥—ã –æ–∫—Ä—É–∂–µ–Ω–∏—è
env-example: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "# –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ .env –¥–ª—è MCP Artifact Registry"
	@echo "CLOUD_RU_KEY_ID=your_key_id_here"
	@echo "CLOUD_RU_SECRET=your_secret_here"
	@echo "CLOUD_RU_PROJECT_ID=your_project_id_here"

env-check: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
	@if [ -n "$$CLOUD_RU_KEY_ID" ]; then \
		echo "‚úÖ CLOUD_RU_KEY_ID: $$CLOUD_RU_KEY_ID"; \
	else \
		echo "‚ùå CLOUD_RU_KEY_ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; \
	fi
	@if [ -n "$$CLOUD_RU_SECRET" ]; then \
		echo "‚úÖ CLOUD_RU_SECRET: [—Å–∫—Ä—ã—Ç–æ]"; \
	else \
		echo "‚ùå CLOUD_RU_SECRET: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; \
	fi
	@if [ -n "$$CLOUD_RU_PROJECT_ID" ]; then \
		echo "‚úÖ CLOUD_RU_PROJECT_ID: $$CLOUD_RU_PROJECT_ID"; \
	else \
		echo "‚ùå CLOUD_RU_PROJECT_ID: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"; \
	fi 