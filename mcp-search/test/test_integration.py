#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MCP Search —Å–µ—Ä–≤–µ—Ä–∞.
–í—ã–ø–æ–ª–Ω—è—é—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∫ DuckDuckGo API.
"""

import pytest
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ server.py
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from server import search_web, search_news, search_images, search_duckduckgo


@pytest.mark.integration
@pytest.mark.asyncio
async def test_real_web_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ"""
    result = await search_web("Python programming language", 3)
    
    assert isinstance(result, str)
    assert "–í–µ–±-–ø–æ–∏—Å–∫" in result
    assert "Python" in result
    # –ú–æ–∂–µ—Ç –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    assert len(result) > 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞


@pytest.mark.integration
@pytest.mark.asyncio
async def test_real_news_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    result = await search_news("technology news", 3)
    
    assert isinstance(result, str)
    assert "–ù–æ–≤–æ—Å—Ç–∏" in result
    assert "technology" in result


@pytest.mark.integration
@pytest.mark.asyncio
async def test_real_image_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    result = await search_images("cats", 3)
    
    assert isinstance(result, str)
    assert "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" in result
    assert "cats" in result


@pytest.mark.integration
@pytest.mark.asyncio
async def test_different_languages():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö"""
    test_queries = [
        ("—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "web"),
        ("nouvelles technologie", "web"),
        ("Êù±‰∫¨ Ë¶≥ÂÖâ", "web"),
    ]
    
    for query, search_type in test_queries:
        if search_type == "web":
            result = await search_web(query, 2)
        
        assert isinstance(result, str)
        assert query in result


@pytest.mark.integration
@pytest.mark.asyncio
async def test_api_robustness():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å API –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º"""
    test_cases = [
        "single",
        "multiple words query",
        "query with symbols: @#$%",
        "very long query " * 10,
        "123456789",
        "emoji query üîçüåç",
    ]
    
    for query in test_cases:
        try:
            result = await search_web(query, 2)
            assert isinstance(result, str)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            assert query in result
        except Exception as e:
            pytest.fail(f"Query '{query}' failed: {e}")


@pytest.mark.integration
@pytest.mark.slow
@pytest.mark.asyncio
async def test_search_limits():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    limits = [1, 5, 10, 20]
    
    for limit in limits:
        result = await search_web("test query", limit)
        assert isinstance(result, str)
        assert "test query" in result


@pytest.mark.integration
@pytest.mark.asyncio
async def test_concurrent_searches():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–∏—Å–∫–∏"""
    import asyncio
    
    queries = [
        "Python",
        "JavaScript", 
        "artificial intelligence",
        "machine learning"
    ]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [search_web(query, 2) for query in queries]
    results = await asyncio.gather(*tasks)
    
    assert len(results) == len(queries)
    for i, result in enumerate(results):
        assert isinstance(result, str)
        assert queries[i] in result 