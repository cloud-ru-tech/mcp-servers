#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è MCP Search —Å–µ—Ä–≤–µ—Ä–∞.
–ü–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏.
"""

import asyncio
import sys
import os
import pytest

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ server.py
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from server import search_web, search_news, search_images


def print_separator(title: str):
    """–í—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    print("\n" + "=" * 80)
    print(f"üîç {title}")
    print("=" * 80)


@pytest.mark.asyncio
async def test_basic_search():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
    print_separator("–ë–ê–ó–û–í–´–ô –ü–û–ò–°–ö")
    
    result = await search_web("Python programming", 3)
    print(result)
    
    assert isinstance(result, str)
    assert "Python" in result


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    asyncio.run(test_basic_search())


if __name__ == "__main__":
    main() 