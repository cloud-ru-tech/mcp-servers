#!/usr/bin/env python3
"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è MCP Search —Å–µ—Ä–≤–µ—Ä–∞.
–ò—Å–ø–æ–ª—å–∑—É—é—Ç –º–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤.
"""

import pytest
from unittest.mock import AsyncMock, patch, MagicMock
import httpx
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ server.py
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from server import (
    search_duckduckgo, 
    format_search_results,
    search_web,
    search_news, 
    search_images
)
from mcp.shared.exceptions import McpError
from mcp.types import INVALID_PARAMS, INTERNAL_ERROR


class TestSearchDuckDuckGo:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ search_duckduckgo"""
    
    @pytest.mark.asyncio
    async def test_search_web_success(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü"""
        mock_response_data = {
            'Results': [
                {
                    'Text': 'Python programming language',
                    'FirstURL': 'https://python.org',
                }
            ],
            'RelatedTopics': [
                {
                    'Text': 'Python tutorial - Learn Python',
                    'FirstURL': 'https://tutorial.python.org',
                }
            ],
            'Abstract': 'Python is a programming language',
            'AbstractText': 'Python overview',
            'AbstractURL': 'https://python.org/about'
        }
        
        mock_response = MagicMock()
        mock_response.json.return_value = mock_response_data
        mock_response.raise_for_status.return_value = None
        
        with patch('httpx.AsyncClient') as mock_client:
            mock_client.return_value.__aenter__.return_value.get.return_value = mock_response
            
            results = await search_duckduckgo("Python programming", "web", 5)
            
            assert len(results) >= 1
            assert results[0]['title'] == 'Python programming language'
            assert results[0]['url'] == 'https://python.org'
            assert results[0]['type'] == 'web'
    
    @pytest.mark.asyncio
    async def test_search_news_success(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        mock_response_data = {
            'Results': [
                {
                    'Text': 'Technology news today',
                    'FirstURL': 'https://news.example.com',
                }
            ]
        }
        
        mock_response = MagicMock()
        mock_response.json.return_value = mock_response_data
        mock_response.raise_for_status.return_value = None
        
        with patch('httpx.AsyncClient') as mock_client:
            mock_client.return_value.__aenter__.return_value.get.return_value = mock_response
            
            results = await search_duckduckgo("technology", "news", 5)
            
            assert len(results) >= 1
            assert results[0]['type'] == 'news'
            assert 'date' in results[0]
    
    @pytest.mark.asyncio
    async def test_search_images_success(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–æ–∫-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)"""
        results = await search_duckduckgo("cats", "images", 3)
        
        assert len(results) == 3
        assert all(result['type'] == 'image' for result in results)
        assert all('image_url' in result for result in results)
    
    @pytest.mark.asyncio
    async def test_search_http_error(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É HTTP –æ—à–∏–±–æ–∫"""
        with patch('httpx.AsyncClient') as mock_client:
            mock_client.return_value.__aenter__.return_value.get.side_effect = httpx.HTTPError("Connection failed")
            
            results = await search_duckduckgo("test", "web", 5)
            
            assert results == []


class TestFormatSearchResults:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ format_search_results"""
    
    def test_format_web_results(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ–±-–ø–æ–∏—Å–∫–∞"""
        results = [
            {
                'title': 'Test Title',
                'url': 'https://example.com',
                'snippet': 'Test description',
                'type': 'web'
            }
        ]
        
        formatted = format_search_results(results, "test query", "web")
        
        assert "üåê –í–µ–±-–ø–æ–∏—Å–∫" in formatted
        assert "test query" in formatted
        assert "Test Title" in formatted
        assert "https://example.com" in formatted
        assert "DuckDuckGo Search API" in formatted
    
    def test_format_news_results(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        results = [
            {
                'title': 'News Title',
                'url': 'https://news.com',
                'snippet': 'News content',
                'type': 'news',
                'date': '2024-06-19'
            }
        ]
        
        formatted = format_search_results(results, "news query", "news")
        
        assert "üì∞ –ù–æ–≤–æ—Å—Ç–∏" in formatted
        assert "üìÖ –î–∞—Ç–∞: 2024-06-19" in formatted
    
    def test_format_empty_results(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        formatted = format_search_results([], "empty query", "web")
        
        assert "–Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤" in formatted
        assert "empty query" in formatted


class TestMCPTools:
    """–¢–µ—Å—Ç—ã –¥–ª—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    
    @pytest.mark.asyncio
    async def test_search_web_success(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"""
        mock_results = [
            {
                'title': 'Test Result',
                'url': 'https://test.com',
                'snippet': 'Test description',
                'type': 'web'
            }
        ]
        
        with patch('server.search_duckduckgo', return_value=mock_results):
            result = await search_web("test query", 5)
            
            assert isinstance(result, str)
            assert "–í–µ–±-–ø–æ–∏—Å–∫" in result
            assert "test query" in result
            assert "Test Result" in result
    
    @pytest.mark.asyncio
    async def test_search_web_empty_query(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ"""
        with pytest.raises(McpError) as exc_info:
            await search_web("", 5)
        
        assert exc_info.value.error.code == INVALID_PARAMS
        assert "–ø—É—Å—Ç—ã–º" in exc_info.value.error.message
    
    @pytest.mark.asyncio
    async def test_search_web_invalid_max_results(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        with pytest.raises(McpError) as exc_info:
            await search_web("test", 100)
        
        assert exc_info.value.error.code == INVALID_PARAMS
        assert "–æ—Ç 1 –¥–æ 50" in exc_info.value.error.message
    
    @pytest.mark.asyncio
    async def test_search_news_success(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        mock_results = [
            {
                'title': 'News Title',
                'url': 'https://news.com',
                'snippet': 'News content',
                'type': 'news',
                'date': '2024-06-19'
            }
        ]
        
        with patch('server.search_duckduckgo', return_value=mock_results):
            result = await search_news("news query", 5)
            
            assert isinstance(result, str)
            assert "–ù–æ–≤–æ—Å—Ç–∏" in result
            assert "news query" in result
    
    @pytest.mark.asyncio
    async def test_search_images_success(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        mock_results = [
            {
                'title': 'Image Title',
                'url': 'https://example.com',
                'image_url': 'https://image.com/img.jpg',
                'snippet': 'Image description',
                'type': 'image'
            }
        ]
        
        with patch('server.search_duckduckgo', return_value=mock_results):
            result = await search_images("image query", 3)
            
            assert isinstance(result, str)
            assert "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" in result
            assert "image query" in result


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    @pytest.mark.asyncio
    async def test_full_search_flow(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–æ–∏—Å–∫–∞"""
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π HTTP –æ—Ç–≤–µ—Ç
        mock_response_data = {
            'Results': [
                {
                    'Text': 'Integration test result',
                    'FirstURL': 'https://integration.test',
                }
            ]
        }
        
        mock_response = MagicMock()
        mock_response.json.return_value = mock_response_data
        mock_response.raise_for_status.return_value = None
        
        with patch('httpx.AsyncClient') as mock_client:
            mock_client.return_value.__aenter__.return_value.get.return_value = mock_response
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            result = await search_web("integration test", 3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert isinstance(result, str)
            assert "integration test" in result
            assert "Integration test result" in result
            assert "https://integration.test" in result
    
    @pytest.mark.asyncio 
    async def test_error_propagation(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –æ—à–∏–±–æ–∫"""
        with patch('server.search_duckduckgo', side_effect=Exception("Network error")):
            with pytest.raises(McpError) as exc_info:
                await search_web("test", 5)
            
            assert exc_info.value.error.code == INTERNAL_ERROR
            assert "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ" in exc_info.value.error.message


class TestEdgeCases:
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    def test_long_query_formatting(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        long_title = "Very long title " * 20
        results = [
            {
                'title': long_title,
                'url': 'https://example.com',
                'snippet': 'Short description',
                'type': 'web'
            }
        ]
        
        formatted = format_search_results(results, "test", "web")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è
        assert len([line for line in formatted.split('\n') if long_title[:100] in line]) > 0
    
    @pytest.mark.asyncio
    async def test_unicode_queries(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Unicode –∑–∞–ø—Ä–æ—Å–æ–≤"""
        unicode_queries = [
            "–ø–æ–∏—Å–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "caf√© fran√ßais", 
            "Êù±‰∫¨ Êó•Êú¨",
            "ŸÖÿ±ÿ≠ÿ®ÿß ÿ®ÿßŸÑÿπÿßŸÑŸÖ"
        ]
        
        for query in unicode_queries:
            try:
                with patch('server.search_duckduckgo', return_value=[]):
                    result = await search_web(query, 3)
                    assert isinstance(result, str)
                    assert query in result
            except Exception as e:
                pytest.fail(f"Unicode query '{query}' failed: {e}")
    
    @pytest.mark.asyncio
    async def test_special_characters_in_results(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"""
        results_with_special_chars = [
            {
                'title': 'Title with "quotes" & <tags>',
                'url': 'https://example.com/path?param=value&other=data',
                'snippet': 'Description with special chars: @#$%^&*()',
                'type': 'web'
            }
        ]
        
        formatted = format_search_results(results_with_special_chars, "special", "web")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        assert '"quotes"' in formatted
        assert "&" in formatted
        assert "@#$%^&*()" in formatted 