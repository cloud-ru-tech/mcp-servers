from datetime import datetime
from typing import Dict, List
import uvicorn
from starlette.applications import Starlette
from starlette.requests import Request
from starlette.routing import Route, Mount

from mcp.server.fastmcp import FastMCP
from mcp.shared.exceptions import McpError
from mcp.types import INTERNAL_ERROR, INVALID_PARAMS
from mcp.server.sse import SseServerTransport

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞–∫–µ—Ç duckduckgo-search
from duckduckgo_search import DDGS

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "search"
mcp = FastMCP("search")


async def search_duckduckgo_improved(
    query: str, 
    search_type: str = "web",
    max_results: int = 10,
    region: str = "wt-wt",
    time_limit: str = None
) -> List[Dict]:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–∫–µ—Ç–∞ duckduckgo-search
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ (web, news, images, videos)
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        region: –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞
        time_limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (d, w, m, y)
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DDGS —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        ddgs = DDGS(timeout=20)
        results = []
        
        if search_type == "web":
            # –í–µ–±-–ø–æ–∏—Å–∫
            search_results = ddgs.text(
                keywords=query,
                region=region,
                safesearch="moderate",
                timelimit=time_limit,
                max_results=max_results
            )
            
            for item in search_results:
                results.append({
                    'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'url': item.get('href', ''),
                    'snippet': item.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                    'type': 'web'
                })
                
        elif search_type == "news":
            # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
            search_results = ddgs.news(
                keywords=query,
                region=region,
                safesearch="moderate",
                timelimit=time_limit,
                max_results=max_results
            )
            
            for item in search_results:
                results.append({
                    'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'url': item.get('url', ''),
                    'snippet': item.get('body', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                    'date': item.get('date', ''),
                    'source': item.get('source', ''),
                    'type': 'news'
                })
                
        elif search_type == "images":
            # –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            search_results = ddgs.images(
                keywords=query,
                region=region,
                safesearch="moderate",
                timelimit=time_limit,
                max_results=max_results
            )
            
            for item in search_results:
                results.append({
                    'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'url': item.get('url', ''),
                    'image_url': item.get('image', ''),
                    'thumbnail': item.get('thumbnail', ''),
                    'width': item.get('width', ''),
                    'height': item.get('height', ''),
                    'snippet': item.get('title', ''),
                    'type': 'image'
                })
                
        elif search_type == "videos":
            # –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ
            search_results = ddgs.videos(
                keywords=query,
                region=region,
                safesearch="moderate",
                timelimit=time_limit,
                max_results=max_results
            )
            
            for item in search_results:
                results.append({
                    'title': item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                    'url': item.get('content', ''),
                    'description': item.get('description', 
                                              '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                    'duration': item.get('duration', ''),
                    'published': item.get('published', ''),
                    'publisher': item.get('publisher', ''),
                    'embed_url': item.get('embed_url', ''),
                    'type': 'video'
                })
        
        return results
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ DuckDuckGo –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
        return []


def format_search_results_improved(results: List[Dict], query: str, search_type: str) -> str:
    """
    –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    
    Args:
        results: –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    if not results:
        return f"üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    type_icons = {
        'web': 'üåê',
        'news': 'üì∞', 
        'image': 'üñºÔ∏è',
        'video': 'üé•',
        'images': 'üñºÔ∏è',
        'videos': 'üé•'
    }
    
    type_names = {
        'web': '–í–µ–±-–ø–æ–∏—Å–∫',
        'news': '–ù–æ–≤–æ—Å—Ç–∏',
        'image': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 
        'video': '–í–∏–¥–µ–æ',
        'images': '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        'videos': '–í–∏–¥–µ–æ'
    }
    
    icon = type_icons.get(search_type, 'üîç')
    type_name = type_names.get(search_type, '–ü–æ–∏—Å–∫')
    
    formatted = f"""{icon} {type_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É "{query}"

üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}
üïí –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: duckduckgo-search v8.0+

"""
    
    for i, result in enumerate(results, 1):
        title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:150]
        url = result.get('url', '')
        snippet = result.get('snippet', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:300]
        
        formatted += f"""
üìë {i}. {title}
üîó {url}
üìù {snippet}
"""
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if search_type == 'news':
            if result.get('date'):
                formatted += f"üìÖ –î–∞—Ç–∞: {result['date']}\n"
            if result.get('source'):
                formatted += f"üè¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {result['source']}\n"
        
        elif search_type in ['image', 'images']:
            if result.get('image_url'):
                formatted += f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_url']}\n"
            if result.get('width') and result.get('height'):
                formatted += f"üìê –†–∞–∑–º–µ—Ä: {result['width']}x{result['height']}\n"
        
        elif search_type in ['video', 'videos']:
            if result.get('duration'):
                formatted += f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {result['duration']}\n"
            if result.get('publisher'):
                formatted += f"üè¢ –ö–∞–Ω–∞–ª: {result['publisher']}\n"
            if result.get('published'):
                formatted += f"üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {result['published']}\n"
        
        formatted += "‚îÄ" * 50 + "\n"
    
    return formatted


@mcp.tool()
async def search_web(query: str, max_results: int = 15, region: str = "ru-ru", time_limit: str = None) -> str:
    """
    üåê –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ DuckDuckGo
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ duckduckgo-search.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15, –º–∞–∫—Å 50)
        region: –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru-ru, —Ç–∞–∫–∂–µ us-en, wt-wt –∏ —Ç.–¥.)
        time_limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (d=–¥–µ–Ω—å, w=–Ω–µ–¥–µ–ª—è, m=–º–µ—Å—è—Ü, y=–≥–æ–¥)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    """
    if not query.strip():
        raise McpError(INVALID_PARAMS, "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    max_results = min(max_results, 50)
    
    try:
        results = await search_duckduckgo_improved(
            query=query.strip(),
            search_type="web", 
            max_results=max_results,
            region=region,
            time_limit=time_limit
        )
        
        return format_search_results_improved(results, query, "web")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}"
        print(error_msg)
        raise McpError(INTERNAL_ERROR, error_msg)


@mcp.tool()
async def search_news(query: str, max_results: int = 15, region: str = "ru-ru", time_limit: str = "w") -> str:
    """
    üì∞ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ DuckDuckGo
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ duckduckgo-search.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –¥–∞—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15, –º–∞–∫—Å 30) 
        region: –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru-ru, —Ç–∞–∫–∂–µ us-en, wt-wt –∏ —Ç.–¥.)
        time_limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (d=–¥–µ–Ω—å, w=–Ω–µ–¥–µ–ª—è, m=–º–µ—Å—è—Ü)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –¥–∞—Ç–∞–º–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    """
    if not query.strip():
        raise McpError(INVALID_PARAMS, "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
    max_results = min(max_results, 30)
    
    try:
        results = await search_duckduckgo_improved(
            query=query.strip(),
            search_type="news",
            max_results=max_results,
            region=region,
            time_limit=time_limit
        )
        
        return format_search_results_improved(results, query, "news")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {str(e)}"
        print(error_msg)
        raise McpError(INTERNAL_ERROR, error_msg)


@mcp.tool()
async def search_images(query: str, max_results: int = 15, region: str = "ru-ru") -> str:
    """
    üñºÔ∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ DuckDuckGo
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ duckduckgo-search.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –ø—Ä–µ–≤—å—é.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15, –º–∞–∫—Å 20)
        region: –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru-ru, —Ç–∞–∫–∂–µ us-en, wt-wt –∏ —Ç.–¥.)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
    """
    if not query.strip():
        raise McpError(INVALID_PARAMS, "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    max_results = min(max_results, 20)
    
    try:
        results = await search_duckduckgo_improved(
            query=query.strip(),
            search_type="images",
            max_results=max_results,
            region=region
        )
        
        return format_search_results_improved(results, query, "images")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}"
        print(error_msg)
        raise McpError(INTERNAL_ERROR, error_msg)


@mcp.tool()
async def search_videos(query: str, max_results: int = 15, region: str = "ru-ru", time_limit: str = None) -> str:
    """
    üé• –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ DuckDuckGo
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞ duckduckgo-search.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∏–¥–µ–æ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15, –º–∞–∫—Å 20)
        region: –†–µ–≥–∏–æ–Ω –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ru-ru, —Ç–∞–∫–∂–µ us-en, wt-wt –∏ —Ç.–¥.)
        time_limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (d=–¥–µ–Ω—å, w=–Ω–µ–¥–µ–ª—è, m=–º–µ—Å—è—Ü)
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    if not query.strip():
        raise McpError(INVALID_PARAMS, "–ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ
    max_results = min(max_results, 20)
    
    try:
        results = await search_duckduckgo_improved(
            query=query.strip(),
            search_type="videos",
            max_results=max_results,
            region=region,
            time_limit=time_limit
        )
        
        return format_search_results_improved(results, query, "videos")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∏–¥–µ–æ: {str(e)}"
        print(error_msg)
        raise McpError(INTERNAL_ERROR, error_msg)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSE —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
sse = SseServerTransport("/messages/")


async def handle_sse(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    _server = mcp._mcp_server
    async with sse.connect_sse(
        request.scope,
        request.receive,
        request._send,
    ) as (reader, writer):
        await _server.run(
            reader, 
            writer, 
            _server.create_initialization_options()
        )


# –°–æ–∑–¥–∞–Ω–∏–µ Starlette –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Starlette(
    debug=True,
    routes=[
        Route("/sse", endpoint=handle_sse),
        Mount("/messages/", app=sse.handle_post_message),
    ],
)

if __name__ == "__main__":
    print("üîç –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∏—Å–∫–∞ —Å DuckDuckGo API...")
    print("üì° –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8002")
    print("üîó SSE endpoint: http://localhost:8002/sse")
    print("üìß Messages endpoint: http://localhost:8002/messages/")
    print("üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    print("   - search_web(query, max_results) - –ø–æ–∏—Å–∫ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü")
    print("   - search_news(query, max_results) - –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π")
    print("   - search_images(query, max_results) - –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("üåç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo API (–±–µ–∑ API –∫–ª—é—á–µ–π)")
    print("üÜì –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ª—é–±—ã–µ —è–∑—ã–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å—ã!")
    
    uvicorn.run(app, host="0.0.0.0", port=8002) 